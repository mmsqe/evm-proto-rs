// This file is @generated by prost-build.
/// ContinuousFund defines the fields of continuous fund proposal.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContinuousFund {
    /// Recipient is the address string of the account receiving funds.
    #[prost(string, tag = "1")]
    pub recipient: ::prost::alloc::string::String,
    /// Percentage is the percentage of funds to be allocated from Community pool.
    #[prost(string, tag = "2")]
    pub percentage: ::prost::alloc::string::String,
    /// Optional, if expiry is set, removes the state object when expired.
    #[prost(message, optional, tag = "3")]
    pub expiry: ::core::option::Option<::cosmos_sdk_proto::Timestamp>,
}
impl ::prost::Name for ContinuousFund {
    const NAME: &'static str = "ContinuousFund";
    const PACKAGE: &'static str = "cosmos.protocolpool.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.protocolpool.v1.ContinuousFund".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.protocolpool.v1.ContinuousFund".into()
    }
}
/// Params defines the parameters for the protocolpool module.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Params {
    /// EnabledDistributionDenoms lists the denoms that are allowed to be distributed.
    /// This is to avoid spending time distributing undesired tokens to continuous funds and budgets.
    #[prost(string, repeated, tag = "1")]
    pub enabled_distribution_denoms: ::prost::alloc::vec::Vec<
        ::prost::alloc::string::String,
    >,
    /// DistributionFrequency is the frequency (in terms of blocks) that funds are distributed out from the
    /// x/protocolpool module.
    #[prost(uint64, tag = "2")]
    pub distribution_frequency: u64,
}
impl ::prost::Name for Params {
    const NAME: &'static str = "Params";
    const PACKAGE: &'static str = "cosmos.protocolpool.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.protocolpool.v1.Params".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.protocolpool.v1.Params".into()
    }
}
/// MsgFundCommunityPool allows an account to directly
/// fund the community pool.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgFundCommunityPool {
    #[prost(string, tag = "1")]
    pub depositor: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub amount: ::prost::alloc::vec::Vec<
        ::cosmos_sdk_proto::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for MsgFundCommunityPool {
    const NAME: &'static str = "MsgFundCommunityPool";
    const PACKAGE: &'static str = "cosmos.protocolpool.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.protocolpool.v1.MsgFundCommunityPool".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.protocolpool.v1.MsgFundCommunityPool".into()
    }
}
/// MsgFundCommunityPoolResponse defines the Msg/FundCommunityPool response type.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgFundCommunityPoolResponse {}
impl ::prost::Name for MsgFundCommunityPoolResponse {
    const NAME: &'static str = "MsgFundCommunityPoolResponse";
    const PACKAGE: &'static str = "cosmos.protocolpool.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.protocolpool.v1.MsgFundCommunityPoolResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.protocolpool.v1.MsgFundCommunityPoolResponse".into()
    }
}
/// MsgCommunityPoolSpend defines a message for sending tokens from the community
/// pool to another account. This message is typically executed via a governance
/// proposal with the governance module being the executing authority.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCommunityPoolSpend {
    /// Authority is the address that controls the module (defaults to x/gov unless overwritten).
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub recipient: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub amount: ::prost::alloc::vec::Vec<
        ::cosmos_sdk_proto::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for MsgCommunityPoolSpend {
    const NAME: &'static str = "MsgCommunityPoolSpend";
    const PACKAGE: &'static str = "cosmos.protocolpool.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.protocolpool.v1.MsgCommunityPoolSpend".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.protocolpool.v1.MsgCommunityPoolSpend".into()
    }
}
/// MsgCommunityPoolSpendResponse defines the response to executing a
/// MsgCommunityPoolSpend message.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgCommunityPoolSpendResponse {}
impl ::prost::Name for MsgCommunityPoolSpendResponse {
    const NAME: &'static str = "MsgCommunityPoolSpendResponse";
    const PACKAGE: &'static str = "cosmos.protocolpool.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.protocolpool.v1.MsgCommunityPoolSpendResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.protocolpool.v1.MsgCommunityPoolSpendResponse".into()
    }
}
/// MsgCreateContinuousFund defines a message for adding continuous funds.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCreateContinuousFund {
    /// Authority is the address that controls the module (defaults to x/gov unless overwritten).
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// Recipient address of the account receiving funds.
    #[prost(string, tag = "2")]
    pub recipient: ::prost::alloc::string::String,
    /// Percentage is the percentage of funds to be allocated from Community pool.
    #[prost(string, tag = "3")]
    pub percentage: ::prost::alloc::string::String,
    /// Optional, if expiry is set, removes the state object when expired.
    #[prost(message, optional, tag = "4")]
    pub expiry: ::core::option::Option<::cosmos_sdk_proto::Timestamp>,
}
impl ::prost::Name for MsgCreateContinuousFund {
    const NAME: &'static str = "MsgCreateContinuousFund";
    const PACKAGE: &'static str = "cosmos.protocolpool.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.protocolpool.v1.MsgCreateContinuousFund".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.protocolpool.v1.MsgCreateContinuousFund".into()
    }
}
/// MsgCreateContinuousFundResponse defines the response to executing a
/// MsgCreateContinuousFund message.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgCreateContinuousFundResponse {}
impl ::prost::Name for MsgCreateContinuousFundResponse {
    const NAME: &'static str = "MsgCreateContinuousFundResponse";
    const PACKAGE: &'static str = "cosmos.protocolpool.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.protocolpool.v1.MsgCreateContinuousFundResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.protocolpool.v1.MsgCreateContinuousFundResponse".into()
    }
}
/// MsgCancelContinuousFund defines a message to cancel continuous funds for a specific recipient.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCancelContinuousFund {
    /// Authority is the account address of authority.
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// Recipient is the account address string of the recipient whose funds are to be cancelled.
    #[prost(string, tag = "2")]
    pub recipient: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgCancelContinuousFund {
    const NAME: &'static str = "MsgCancelContinuousFund";
    const PACKAGE: &'static str = "cosmos.protocolpool.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.protocolpool.v1.MsgCancelContinuousFund".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.protocolpool.v1.MsgCancelContinuousFund".into()
    }
}
/// MsgCancelContinuousFundResponse defines the response to executing a
/// MsgCancelContinuousFund message.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCancelContinuousFundResponse {
    /// CanceledTime is the canceled time.
    #[prost(message, optional, tag = "1")]
    pub canceled_time: ::core::option::Option<::cosmos_sdk_proto::Timestamp>,
    /// CanceledHeight defines the canceled block height.
    #[prost(uint64, tag = "2")]
    pub canceled_height: u64,
    /// Recipient is the account address string of the recipient whose funds are cancelled.
    #[prost(string, tag = "3")]
    pub recipient: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgCancelContinuousFundResponse {
    const NAME: &'static str = "MsgCancelContinuousFundResponse";
    const PACKAGE: &'static str = "cosmos.protocolpool.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.protocolpool.v1.MsgCancelContinuousFundResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.protocolpool.v1.MsgCancelContinuousFundResponse".into()
    }
}
/// MsgUpdateParams is the Msg/UpdateParams request type.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParams {
    /// authority is the address that controls the module (defaults to x/gov unless overwritten).
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// params defines the x/protocolpool parameters to update.
    ///
    /// NOTE: All parameters must be supplied.
    #[prost(message, optional, tag = "2")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for MsgUpdateParams {
    const NAME: &'static str = "MsgUpdateParams";
    const PACKAGE: &'static str = "cosmos.protocolpool.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.protocolpool.v1.MsgUpdateParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.protocolpool.v1.MsgUpdateParams".into()
    }
}
/// MsgUpdateParamsResponse defines the response structure for executing a
/// MsgUpdateParams message.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgUpdateParamsResponse {}
impl ::prost::Name for MsgUpdateParamsResponse {
    const NAME: &'static str = "MsgUpdateParamsResponse";
    const PACKAGE: &'static str = "cosmos.protocolpool.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.protocolpool.v1.MsgUpdateParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.protocolpool.v1.MsgUpdateParamsResponse".into()
    }
}
/// Generated client implementations.
#[cfg(feature = "client")]
pub mod msg_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Msg defines the pool Msg service.
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    #[cfg(feature = "transport")]
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// FundCommunityPool defines a method to allow an account to directly
        /// fund the community pool.
        pub async fn fund_community_pool(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgFundCommunityPool>,
        ) -> std::result::Result<
            tonic::Response<super::MsgFundCommunityPoolResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.protocolpool.v1.Msg/FundCommunityPool",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("cosmos.protocolpool.v1.Msg", "FundCommunityPool"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// CommunityPoolSpend defines a governance operation for sending tokens from
        /// the community pool in the x/protocolpool module to another account, which
        /// could be the governance module itself. The authority is defined in the
        /// keeper.
        pub async fn community_pool_spend(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgCommunityPoolSpend>,
        ) -> std::result::Result<
            tonic::Response<super::MsgCommunityPoolSpendResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.protocolpool.v1.Msg/CommunityPoolSpend",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("cosmos.protocolpool.v1.Msg", "CommunityPoolSpend"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// CreateContinuousFund defines a method to distribute a percentage of funds to an address continuously.
        /// This ContinuousFund can be indefinite or run until a given expiry time.
        /// Funds come from validator block rewards from x/distribution, but may also come from
        /// any user who funds the ProtocolPoolEscrow module account directly through x/bank.
        pub async fn create_continuous_fund(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgCreateContinuousFund>,
        ) -> std::result::Result<
            tonic::Response<super::MsgCreateContinuousFundResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.protocolpool.v1.Msg/CreateContinuousFund",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("cosmos.protocolpool.v1.Msg", "CreateContinuousFund"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// CancelContinuousFund defines a method for cancelling continuous fund.
        pub async fn cancel_continuous_fund(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgCancelContinuousFund>,
        ) -> std::result::Result<
            tonic::Response<super::MsgCancelContinuousFundResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.protocolpool.v1.Msg/CancelContinuousFund",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("cosmos.protocolpool.v1.Msg", "CancelContinuousFund"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// UpdateParams defines a governance operation for updating the x/protocolpool module parameters.
        /// The authority is defined in the keeper.
        pub async fn update_params(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpdateParams>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.protocolpool.v1.Msg/UpdateParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.protocolpool.v1.Msg", "UpdateParams"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "server")]
pub mod msg_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MsgServer.
    #[async_trait]
    pub trait Msg: std::marker::Send + std::marker::Sync + 'static {
        /// FundCommunityPool defines a method to allow an account to directly
        /// fund the community pool.
        async fn fund_community_pool(
            &self,
            request: tonic::Request<super::MsgFundCommunityPool>,
        ) -> std::result::Result<
            tonic::Response<super::MsgFundCommunityPoolResponse>,
            tonic::Status,
        >;
        /// CommunityPoolSpend defines a governance operation for sending tokens from
        /// the community pool in the x/protocolpool module to another account, which
        /// could be the governance module itself. The authority is defined in the
        /// keeper.
        async fn community_pool_spend(
            &self,
            request: tonic::Request<super::MsgCommunityPoolSpend>,
        ) -> std::result::Result<
            tonic::Response<super::MsgCommunityPoolSpendResponse>,
            tonic::Status,
        >;
        /// CreateContinuousFund defines a method to distribute a percentage of funds to an address continuously.
        /// This ContinuousFund can be indefinite or run until a given expiry time.
        /// Funds come from validator block rewards from x/distribution, but may also come from
        /// any user who funds the ProtocolPoolEscrow module account directly through x/bank.
        async fn create_continuous_fund(
            &self,
            request: tonic::Request<super::MsgCreateContinuousFund>,
        ) -> std::result::Result<
            tonic::Response<super::MsgCreateContinuousFundResponse>,
            tonic::Status,
        >;
        /// CancelContinuousFund defines a method for cancelling continuous fund.
        async fn cancel_continuous_fund(
            &self,
            request: tonic::Request<super::MsgCancelContinuousFund>,
        ) -> std::result::Result<
            tonic::Response<super::MsgCancelContinuousFundResponse>,
            tonic::Status,
        >;
        /// UpdateParams defines a governance operation for updating the x/protocolpool module parameters.
        /// The authority is defined in the keeper.
        async fn update_params(
            &self,
            request: tonic::Request<super::MsgUpdateParams>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateParamsResponse>,
            tonic::Status,
        >;
    }
    /// Msg defines the pool Msg service.
    #[derive(Debug)]
    pub struct MsgServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> MsgServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for MsgServer<T>
    where
        T: Msg,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/cosmos.protocolpool.v1.Msg/FundCommunityPool" => {
                    #[allow(non_camel_case_types)]
                    struct FundCommunityPoolSvc<T: Msg>(pub Arc<T>);
                    impl<T: Msg> tonic::server::UnaryService<super::MsgFundCommunityPool>
                    for FundCommunityPoolSvc<T> {
                        type Response = super::MsgFundCommunityPoolResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgFundCommunityPool>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::fund_community_pool(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FundCommunityPoolSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.protocolpool.v1.Msg/CommunityPoolSpend" => {
                    #[allow(non_camel_case_types)]
                    struct CommunityPoolSpendSvc<T: Msg>(pub Arc<T>);
                    impl<
                        T: Msg,
                    > tonic::server::UnaryService<super::MsgCommunityPoolSpend>
                    for CommunityPoolSpendSvc<T> {
                        type Response = super::MsgCommunityPoolSpendResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgCommunityPoolSpend>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::community_pool_spend(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CommunityPoolSpendSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.protocolpool.v1.Msg/CreateContinuousFund" => {
                    #[allow(non_camel_case_types)]
                    struct CreateContinuousFundSvc<T: Msg>(pub Arc<T>);
                    impl<
                        T: Msg,
                    > tonic::server::UnaryService<super::MsgCreateContinuousFund>
                    for CreateContinuousFundSvc<T> {
                        type Response = super::MsgCreateContinuousFundResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgCreateContinuousFund>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::create_continuous_fund(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateContinuousFundSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.protocolpool.v1.Msg/CancelContinuousFund" => {
                    #[allow(non_camel_case_types)]
                    struct CancelContinuousFundSvc<T: Msg>(pub Arc<T>);
                    impl<
                        T: Msg,
                    > tonic::server::UnaryService<super::MsgCancelContinuousFund>
                    for CancelContinuousFundSvc<T> {
                        type Response = super::MsgCancelContinuousFundResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgCancelContinuousFund>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::cancel_continuous_fund(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CancelContinuousFundSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.protocolpool.v1.Msg/UpdateParams" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateParamsSvc<T: Msg>(pub Arc<T>);
                    impl<T: Msg> tonic::server::UnaryService<super::MsgUpdateParams>
                    for UpdateParamsSvc<T> {
                        type Response = super::MsgUpdateParamsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgUpdateParams>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::update_params(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateParamsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for MsgServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "cosmos.protocolpool.v1.Msg";
    impl<T> tonic::server::NamedService for MsgServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// QueryCommunityPoolRequest is the request type for the Query/CommunityPool RPC
/// method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryCommunityPoolRequest {}
impl ::prost::Name for QueryCommunityPoolRequest {
    const NAME: &'static str = "QueryCommunityPoolRequest";
    const PACKAGE: &'static str = "cosmos.protocolpool.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.protocolpool.v1.QueryCommunityPoolRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.protocolpool.v1.QueryCommunityPoolRequest".into()
    }
}
/// QueryCommunityPoolResponse is the response type for the Query/CommunityPool
/// RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryCommunityPoolResponse {
    /// pool defines community pool's coins.
    #[prost(message, repeated, tag = "1")]
    pub pool: ::prost::alloc::vec::Vec<::cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
}
impl ::prost::Name for QueryCommunityPoolResponse {
    const NAME: &'static str = "QueryCommunityPoolResponse";
    const PACKAGE: &'static str = "cosmos.protocolpool.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.protocolpool.v1.QueryCommunityPoolResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.protocolpool.v1.QueryCommunityPoolResponse".into()
    }
}
/// QueryContinuousFundRequest is the request type for the Query/ContinuousFund
/// RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryContinuousFundRequest {
    /// recipient is the recipient address to query unclaimed budget amount for.
    #[prost(string, tag = "1")]
    pub recipient: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryContinuousFundRequest {
    const NAME: &'static str = "QueryContinuousFundRequest";
    const PACKAGE: &'static str = "cosmos.protocolpool.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.protocolpool.v1.QueryContinuousFundRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.protocolpool.v1.QueryContinuousFundRequest".into()
    }
}
/// QueryUnclaimedBudgetResponse is the response type for the Query/ContinuousFund
/// RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryContinuousFundResponse {
    /// ContinuousFunds is the given continuous fund returned in the query.
    #[prost(message, optional, tag = "1")]
    pub continuous_fund: ::core::option::Option<ContinuousFund>,
}
impl ::prost::Name for QueryContinuousFundResponse {
    const NAME: &'static str = "QueryContinuousFundResponse";
    const PACKAGE: &'static str = "cosmos.protocolpool.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.protocolpool.v1.QueryContinuousFundResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.protocolpool.v1.QueryContinuousFundResponse".into()
    }
}
/// QueryContinuousFundRequest is the request type for the Query/ContinuousFunds
/// RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryContinuousFundsRequest {}
impl ::prost::Name for QueryContinuousFundsRequest {
    const NAME: &'static str = "QueryContinuousFundsRequest";
    const PACKAGE: &'static str = "cosmos.protocolpool.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.protocolpool.v1.QueryContinuousFundsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.protocolpool.v1.QueryContinuousFundsRequest".into()
    }
}
/// QueryUnclaimedBudgetResponse is the response type for the Query/ContinuousFunds
/// RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryContinuousFundsResponse {
    /// ContinuousFunds defines all continuous funds in state.
    #[prost(message, repeated, tag = "1")]
    pub continuous_funds: ::prost::alloc::vec::Vec<ContinuousFund>,
}
impl ::prost::Name for QueryContinuousFundsResponse {
    const NAME: &'static str = "QueryContinuousFundsResponse";
    const PACKAGE: &'static str = "cosmos.protocolpool.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.protocolpool.v1.QueryContinuousFundsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.protocolpool.v1.QueryContinuousFundsResponse".into()
    }
}
/// QueryParamsRequest is the response type for the Query/Params RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryParamsRequest {}
impl ::prost::Name for QueryParamsRequest {
    const NAME: &'static str = "QueryParamsRequest";
    const PACKAGE: &'static str = "cosmos.protocolpool.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.protocolpool.v1.QueryParamsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.protocolpool.v1.QueryParamsRequest".into()
    }
}
/// QueryParamsResponse is the response type for the Query/Params RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryParamsResponse {
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for QueryParamsResponse {
    const NAME: &'static str = "QueryParamsResponse";
    const PACKAGE: &'static str = "cosmos.protocolpool.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.protocolpool.v1.QueryParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.protocolpool.v1.QueryParamsResponse".into()
    }
}
/// Generated client implementations.
#[cfg(feature = "client")]
pub mod query_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Query defines the gRPC querier service for community pool module.
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    #[cfg(feature = "transport")]
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// CommunityPool queries the community pool coins.
        pub async fn community_pool(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryCommunityPoolRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryCommunityPoolResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.protocolpool.v1.Query/CommunityPool",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("cosmos.protocolpool.v1.Query", "CommunityPool"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// ContinuousFund queries a continuous fund by the recipient is is associated with.
        pub async fn continuous_fund(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryContinuousFundRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryContinuousFundResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.protocolpool.v1.Query/ContinuousFund",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("cosmos.protocolpool.v1.Query", "ContinuousFund"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// ContinuousFunds queries all continuous funds in the store.
        pub async fn continuous_funds(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryContinuousFundsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryContinuousFundsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.protocolpool.v1.Query/ContinuousFunds",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("cosmos.protocolpool.v1.Query", "ContinuousFunds"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Params returns the total set of x/protocolpool parameters.
        pub async fn params(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.protocolpool.v1.Query/Params",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.protocolpool.v1.Query", "Params"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "server")]
pub mod query_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with QueryServer.
    #[async_trait]
    pub trait Query: std::marker::Send + std::marker::Sync + 'static {
        /// CommunityPool queries the community pool coins.
        async fn community_pool(
            &self,
            request: tonic::Request<super::QueryCommunityPoolRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryCommunityPoolResponse>,
            tonic::Status,
        >;
        /// ContinuousFund queries a continuous fund by the recipient is is associated with.
        async fn continuous_fund(
            &self,
            request: tonic::Request<super::QueryContinuousFundRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryContinuousFundResponse>,
            tonic::Status,
        >;
        /// ContinuousFunds queries all continuous funds in the store.
        async fn continuous_funds(
            &self,
            request: tonic::Request<super::QueryContinuousFundsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryContinuousFundsResponse>,
            tonic::Status,
        >;
        /// Params returns the total set of x/protocolpool parameters.
        async fn params(
            &self,
            request: tonic::Request<super::QueryParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryParamsResponse>,
            tonic::Status,
        >;
    }
    /// Query defines the gRPC querier service for community pool module.
    #[derive(Debug)]
    pub struct QueryServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> QueryServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for QueryServer<T>
    where
        T: Query,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/cosmos.protocolpool.v1.Query/CommunityPool" => {
                    #[allow(non_camel_case_types)]
                    struct CommunityPoolSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryCommunityPoolRequest>
                    for CommunityPoolSvc<T> {
                        type Response = super::QueryCommunityPoolResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryCommunityPoolRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::community_pool(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CommunityPoolSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.protocolpool.v1.Query/ContinuousFund" => {
                    #[allow(non_camel_case_types)]
                    struct ContinuousFundSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryContinuousFundRequest>
                    for ContinuousFundSvc<T> {
                        type Response = super::QueryContinuousFundResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryContinuousFundRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::continuous_fund(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ContinuousFundSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.protocolpool.v1.Query/ContinuousFunds" => {
                    #[allow(non_camel_case_types)]
                    struct ContinuousFundsSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryContinuousFundsRequest>
                    for ContinuousFundsSvc<T> {
                        type Response = super::QueryContinuousFundsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryContinuousFundsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::continuous_funds(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ContinuousFundsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.protocolpool.v1.Query/Params" => {
                    #[allow(non_camel_case_types)]
                    struct ParamsSvc<T: Query>(pub Arc<T>);
                    impl<T: Query> tonic::server::UnaryService<super::QueryParamsRequest>
                    for ParamsSvc<T> {
                        type Response = super::QueryParamsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryParamsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::params(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ParamsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for QueryServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "cosmos.protocolpool.v1.Query";
    impl<T> tonic::server::NamedService for QueryServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// GenesisState defines the protocolpool module's genesis state.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    /// ContinuousFunds defines the continuous funds at genesis.
    #[prost(message, repeated, tag = "1")]
    pub continuous_funds: ::prost::alloc::vec::Vec<ContinuousFund>,
    /// Params defines the parameters of this module, currently only contains the
    /// denoms that will be used for continuous fund distributions.
    #[prost(message, optional, tag = "2")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for GenesisState {
    const NAME: &'static str = "GenesisState";
    const PACKAGE: &'static str = "cosmos.protocolpool.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.protocolpool.v1.GenesisState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.protocolpool.v1.GenesisState".into()
    }
}
