// This file is @generated by prost-build.
/// TokenPair defines an instance that records a pairing (mapping) consisting of a native
/// Cosmos Coin and an ERC20 token address. The "pair" does not imply an asset swap exchange.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenPair {
    /// erc20_address is the hex address of ERC20 contract token
    #[prost(string, tag = "1")]
    pub erc20_address: ::prost::alloc::string::String,
    /// denom defines the cosmos base denomination to be mapped to
    #[prost(string, tag = "2")]
    pub denom: ::prost::alloc::string::String,
    /// enabled defines the token mapping enable status
    #[prost(bool, tag = "3")]
    pub enabled: bool,
    /// contract_owner is the an ENUM specifying the type of ERC20 owner (0
    /// invalid, 1 ModuleAccount, 2 external address)
    #[prost(enumeration = "Owner", tag = "4")]
    pub contract_owner: i32,
}
impl ::prost::Name for TokenPair {
    const NAME: &'static str = "TokenPair";
    const PACKAGE: &'static str = "cosmos.evm.erc20.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.evm.erc20.v1.TokenPair".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.evm.erc20.v1.TokenPair".into()
    }
}
/// Allowance is a token allowance only for erc20 precompile
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Allowance {
    /// erc20_address is the hex address of ERC20 contract
    #[prost(string, tag = "1")]
    pub erc20_address: ::prost::alloc::string::String,
    /// owner is the hex address of the owner account
    #[prost(string, tag = "2")]
    pub owner: ::prost::alloc::string::String,
    /// spender is the hex address that is allowed to spend the allowance
    #[prost(string, tag = "3")]
    pub spender: ::prost::alloc::string::String,
    /// value specifies the maximum amount of tokens that can be spent
    /// by this token allowance and will be updated as tokens are spent.
    #[prost(string, tag = "4")]
    pub value: ::prost::alloc::string::String,
}
impl ::prost::Name for Allowance {
    const NAME: &'static str = "Allowance";
    const PACKAGE: &'static str = "cosmos.evm.erc20.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.evm.erc20.v1.Allowance".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.evm.erc20.v1.Allowance".into()
    }
}
/// Deprecated: RegisterCoinProposal is a gov Content type to register a token
/// pair for a native Cosmos coin. We're keeping it to remove the existing
/// proposals from store. After that, remove this message.
///
/// NOTE: Keep this message for backwards compatibility on proposals query
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterCoinProposal {
    /// title of the proposal
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    /// description of the proposal
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    /// metadata slice of the native Cosmos coins
    #[prost(message, repeated, tag = "3")]
    pub metadata: ::prost::alloc::vec::Vec<super::super::super::bank::v1beta1::Metadata>,
}
impl ::prost::Name for RegisterCoinProposal {
    const NAME: &'static str = "RegisterCoinProposal";
    const PACKAGE: &'static str = "cosmos.evm.erc20.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.evm.erc20.v1.RegisterCoinProposal".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.evm.erc20.v1.RegisterCoinProposal".into()
    }
}
/// Deprecated: ProposalMetadata is used to parse a slice of denom metadata and
/// generate the RegisterCoinProposal content. We're keeping it to remove the
/// existing proposals from store. After that, remove this message.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProposalMetadata {
    /// metadata slice of the native Cosmos coins
    #[prost(message, repeated, tag = "1")]
    pub metadata: ::prost::alloc::vec::Vec<super::super::super::bank::v1beta1::Metadata>,
}
impl ::prost::Name for ProposalMetadata {
    const NAME: &'static str = "ProposalMetadata";
    const PACKAGE: &'static str = "cosmos.evm.erc20.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.evm.erc20.v1.ProposalMetadata".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.evm.erc20.v1.ProposalMetadata".into()
    }
}
/// Deprecated: RegisterERC20Proposal is a gov Content type to register a token
/// pair for an ERC20 token.
///
/// NOTE: Keep this message for backwards compatibility on proposals query
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterErc20Proposal {
    /// title of the proposal
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    /// description of the proposal
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    /// erc20addresses is a slice of  ERC20 token contract addresses
    #[prost(string, repeated, tag = "3")]
    pub erc20addresses: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for RegisterErc20Proposal {
    const NAME: &'static str = "RegisterERC20Proposal";
    const PACKAGE: &'static str = "cosmos.evm.erc20.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.evm.erc20.v1.RegisterERC20Proposal".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.evm.erc20.v1.RegisterERC20Proposal".into()
    }
}
/// Deprecated: ToggleTokenConversionProposal is a gov Content type to toggle the
/// conversion of a token pair.
///
/// NOTE: Keep this message for backwards compatibility on proposals query
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ToggleTokenConversionProposal {
    /// title of the proposal
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    /// description of the proposal
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    /// token identifier can be either the hex contract address of the ERC20 or the
    /// Cosmos base denomination
    #[prost(string, tag = "3")]
    pub token: ::prost::alloc::string::String,
}
impl ::prost::Name for ToggleTokenConversionProposal {
    const NAME: &'static str = "ToggleTokenConversionProposal";
    const PACKAGE: &'static str = "cosmos.evm.erc20.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.evm.erc20.v1.ToggleTokenConversionProposal".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.evm.erc20.v1.ToggleTokenConversionProposal".into()
    }
}
/// Owner enumerates the ownership of a ERC20 contract.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Owner {
    /// OWNER_UNSPECIFIED defines an invalid/undefined owner.
    Unspecified = 0,
    /// OWNER_MODULE - erc20 is owned by the erc20 module account.
    Module = 1,
    /// OWNER_EXTERNAL - erc20 is owned by an external account.
    External = 2,
}
impl Owner {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "OWNER_UNSPECIFIED",
            Self::Module => "OWNER_MODULE",
            Self::External => "OWNER_EXTERNAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "OWNER_UNSPECIFIED" => Some(Self::Unspecified),
            "OWNER_MODULE" => Some(Self::Module),
            "OWNER_EXTERNAL" => Some(Self::External),
            _ => None,
        }
    }
}
/// GenesisState defines the module's genesis state.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    /// params are the erc20 module parameters at genesis
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
    /// token_pairs is a slice of the registered token pairs (mappings) at genesis
    #[prost(message, repeated, tag = "2")]
    pub token_pairs: ::prost::alloc::vec::Vec<TokenPair>,
    /// allowances is a slice of the registered allowances at genesis
    #[prost(message, repeated, tag = "3")]
    pub allowances: ::prost::alloc::vec::Vec<Allowance>,
    /// native_precompiles is a slice of registered native precompiles at genesis
    #[prost(string, repeated, tag = "4")]
    pub native_precompiles: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// dynamic_precompiles is a slice of registered dynamic precompiles at genesis
    #[prost(string, repeated, tag = "5")]
    pub dynamic_precompiles: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for GenesisState {
    const NAME: &'static str = "GenesisState";
    const PACKAGE: &'static str = "cosmos.evm.erc20.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.evm.erc20.v1.GenesisState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.evm.erc20.v1.GenesisState".into()
    }
}
/// Params defines the erc20 module params
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Params {
    /// enable_erc20 is the parameter to enable the conversion of Cosmos coins <-->
    /// ERC20 tokens.
    #[prost(bool, tag = "1")]
    pub enable_erc20: bool,
    /// permissionless_registration is the parameter that allows ERC20s to be
    /// permissionlessly registered to be converted to bank tokens and vice versa
    #[prost(bool, tag = "5")]
    pub permissionless_registration: bool,
}
impl ::prost::Name for Params {
    const NAME: &'static str = "Params";
    const PACKAGE: &'static str = "cosmos.evm.erc20.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.evm.erc20.v1.Params".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.evm.erc20.v1.Params".into()
    }
}
/// MsgConvertERC20 defines a Msg to convert a ERC20 token to a native Cosmos
/// coin.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgConvertErc20 {
    /// contract_address of an ERC20 token contract, that is registered in a token
    /// pair
    #[prost(string, tag = "1")]
    pub contract_address: ::prost::alloc::string::String,
    /// amount of ERC20 tokens to convert
    #[prost(string, tag = "2")]
    pub amount: ::prost::alloc::string::String,
    /// receiver is the bech32 address to receive native Cosmos coins
    #[prost(string, tag = "3")]
    pub receiver: ::prost::alloc::string::String,
    /// sender is the hex address from the owner of the given ERC20 tokens
    #[prost(string, tag = "4")]
    pub sender: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgConvertErc20 {
    const NAME: &'static str = "MsgConvertERC20";
    const PACKAGE: &'static str = "cosmos.evm.erc20.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.evm.erc20.v1.MsgConvertERC20".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.evm.erc20.v1.MsgConvertERC20".into()
    }
}
/// MsgConvertERC20Response returns no fields
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgConvertErc20Response {}
impl ::prost::Name for MsgConvertErc20Response {
    const NAME: &'static str = "MsgConvertERC20Response";
    const PACKAGE: &'static str = "cosmos.evm.erc20.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.evm.erc20.v1.MsgConvertERC20Response".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.evm.erc20.v1.MsgConvertERC20Response".into()
    }
}
/// MsgConvertCoin defines a Msg to convert a native Cosmos coin to a ERC20 token
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgConvertCoin {
    /// coin is a Cosmos coin whose denomination is registered in a token pair. The
    /// coin amount defines the amount of coins to convert.
    #[prost(message, optional, tag = "1")]
    pub coin: ::core::option::Option<::cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
    /// receiver is the hex address to receive ERC20 token
    #[prost(string, tag = "2")]
    pub receiver: ::prost::alloc::string::String,
    /// sender is the cosmos bech32 address from the owner of the given Cosmos
    /// coins
    #[prost(string, tag = "3")]
    pub sender: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgConvertCoin {
    const NAME: &'static str = "MsgConvertCoin";
    const PACKAGE: &'static str = "cosmos.evm.erc20.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.evm.erc20.v1.MsgConvertCoin".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.evm.erc20.v1.MsgConvertCoin".into()
    }
}
/// MsgConvertCoinResponse returns no fields
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgConvertCoinResponse {}
impl ::prost::Name for MsgConvertCoinResponse {
    const NAME: &'static str = "MsgConvertCoinResponse";
    const PACKAGE: &'static str = "cosmos.evm.erc20.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.evm.erc20.v1.MsgConvertCoinResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.evm.erc20.v1.MsgConvertCoinResponse".into()
    }
}
/// MsgUpdateParams is the Msg/UpdateParams request type for Erc20 parameters.
/// Since: cosmos-sdk 0.47
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParams {
    /// authority is the address of the governance account.
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// params defines the x/vm parameters to update.
    /// NOTE: All parameters must be supplied.
    #[prost(message, optional, tag = "2")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for MsgUpdateParams {
    const NAME: &'static str = "MsgUpdateParams";
    const PACKAGE: &'static str = "cosmos.evm.erc20.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.evm.erc20.v1.MsgUpdateParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.evm.erc20.v1.MsgUpdateParams".into()
    }
}
/// MsgUpdateParamsResponse defines the response structure for executing a
/// MsgUpdateParams message.
/// Since: cosmos-sdk 0.47
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgUpdateParamsResponse {}
impl ::prost::Name for MsgUpdateParamsResponse {
    const NAME: &'static str = "MsgUpdateParamsResponse";
    const PACKAGE: &'static str = "cosmos.evm.erc20.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.evm.erc20.v1.MsgUpdateParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.evm.erc20.v1.MsgUpdateParamsResponse".into()
    }
}
/// MsgRegisterERC20 is the Msg/RegisterERC20 request type for registering
/// an Erc20 contract token pair.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgRegisterErc20 {
    /// signer is the address registering the erc20 pairs
    #[prost(string, tag = "1")]
    pub signer: ::prost::alloc::string::String,
    /// erc20addresses is a slice of ERC20 token contract hex addresses
    #[prost(string, repeated, tag = "2")]
    pub erc20addresses: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for MsgRegisterErc20 {
    const NAME: &'static str = "MsgRegisterERC20";
    const PACKAGE: &'static str = "cosmos.evm.erc20.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.evm.erc20.v1.MsgRegisterERC20".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.evm.erc20.v1.MsgRegisterERC20".into()
    }
}
/// MsgRegisterERC20Response defines the response structure for executing a
/// MsgRegisterERC20 message.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgRegisterErc20Response {}
impl ::prost::Name for MsgRegisterErc20Response {
    const NAME: &'static str = "MsgRegisterERC20Response";
    const PACKAGE: &'static str = "cosmos.evm.erc20.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.evm.erc20.v1.MsgRegisterERC20Response".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.evm.erc20.v1.MsgRegisterERC20Response".into()
    }
}
/// MsgToggleConversion is the Msg/MsgToggleConversion request type for toggling
/// an Erc20 contract conversion capability.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgToggleConversion {
    /// authority is the address of the governance account.
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// token identifier can be either the hex contract address of the ERC20 or the
    /// Cosmos base denomination
    #[prost(string, tag = "2")]
    pub token: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgToggleConversion {
    const NAME: &'static str = "MsgToggleConversion";
    const PACKAGE: &'static str = "cosmos.evm.erc20.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.evm.erc20.v1.MsgToggleConversion".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.evm.erc20.v1.MsgToggleConversion".into()
    }
}
/// MsgToggleConversionResponse defines the response structure for executing a
/// ToggleConversion message.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgToggleConversionResponse {}
impl ::prost::Name for MsgToggleConversionResponse {
    const NAME: &'static str = "MsgToggleConversionResponse";
    const PACKAGE: &'static str = "cosmos.evm.erc20.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.evm.erc20.v1.MsgToggleConversionResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.evm.erc20.v1.MsgToggleConversionResponse".into()
    }
}
/// Generated client implementations.
#[cfg(feature = "client")]
pub mod msg_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Msg defines the erc20 Msg service.
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    #[cfg(feature = "transport")]
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// ConvertERC20 mints a native Cosmos coin representation of the ERC20 token
        /// contract that is registered on the token mapping.
        pub async fn convert_erc20(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgConvertErc20>,
        ) -> std::result::Result<
            tonic::Response<super::MsgConvertErc20Response>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.evm.erc20.v1.Msg/ConvertERC20",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.evm.erc20.v1.Msg", "ConvertERC20"));
            self.inner.unary(req, path, codec).await
        }
        /// ConvertCoin mints a ERC20 token representation of the native Cosmos coin
        /// that is registered on the token mapping.
        pub async fn convert_coin(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgConvertCoin>,
        ) -> std::result::Result<
            tonic::Response<super::MsgConvertCoinResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.evm.erc20.v1.Msg/ConvertCoin",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.evm.erc20.v1.Msg", "ConvertCoin"));
            self.inner.unary(req, path, codec).await
        }
        /// UpdateParams defines a governance operation for updating the x/erc20 module
        /// parameters. The authority is hard-coded to the Cosmos SDK x/gov module
        /// account
        pub async fn update_params(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpdateParams>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.evm.erc20.v1.Msg/UpdateParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.evm.erc20.v1.Msg", "UpdateParams"));
            self.inner.unary(req, path, codec).await
        }
        /// RegisterERC20 defines a governance operation for registering a token pair
        /// for the specified erc20 contract. The authority is hard-coded to the Cosmos
        /// SDK x/gov module account
        pub async fn register_erc20(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgRegisterErc20>,
        ) -> std::result::Result<
            tonic::Response<super::MsgRegisterErc20Response>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.evm.erc20.v1.Msg/RegisterERC20",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.evm.erc20.v1.Msg", "RegisterERC20"));
            self.inner.unary(req, path, codec).await
        }
        /// ToggleConversion defines a governance operation for enabling/disabling a
        /// token pair conversion. The authority is hard-coded to the Cosmos SDK x/gov
        /// module account
        pub async fn toggle_conversion(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgToggleConversion>,
        ) -> std::result::Result<
            tonic::Response<super::MsgToggleConversionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.evm.erc20.v1.Msg/ToggleConversion",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.evm.erc20.v1.Msg", "ToggleConversion"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "server")]
pub mod msg_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MsgServer.
    #[async_trait]
    pub trait Msg: std::marker::Send + std::marker::Sync + 'static {
        /// ConvertERC20 mints a native Cosmos coin representation of the ERC20 token
        /// contract that is registered on the token mapping.
        async fn convert_erc20(
            &self,
            request: tonic::Request<super::MsgConvertErc20>,
        ) -> std::result::Result<
            tonic::Response<super::MsgConvertErc20Response>,
            tonic::Status,
        >;
        /// ConvertCoin mints a ERC20 token representation of the native Cosmos coin
        /// that is registered on the token mapping.
        async fn convert_coin(
            &self,
            request: tonic::Request<super::MsgConvertCoin>,
        ) -> std::result::Result<
            tonic::Response<super::MsgConvertCoinResponse>,
            tonic::Status,
        >;
        /// UpdateParams defines a governance operation for updating the x/erc20 module
        /// parameters. The authority is hard-coded to the Cosmos SDK x/gov module
        /// account
        async fn update_params(
            &self,
            request: tonic::Request<super::MsgUpdateParams>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateParamsResponse>,
            tonic::Status,
        >;
        /// RegisterERC20 defines a governance operation for registering a token pair
        /// for the specified erc20 contract. The authority is hard-coded to the Cosmos
        /// SDK x/gov module account
        async fn register_erc20(
            &self,
            request: tonic::Request<super::MsgRegisterErc20>,
        ) -> std::result::Result<
            tonic::Response<super::MsgRegisterErc20Response>,
            tonic::Status,
        >;
        /// ToggleConversion defines a governance operation for enabling/disabling a
        /// token pair conversion. The authority is hard-coded to the Cosmos SDK x/gov
        /// module account
        async fn toggle_conversion(
            &self,
            request: tonic::Request<super::MsgToggleConversion>,
        ) -> std::result::Result<
            tonic::Response<super::MsgToggleConversionResponse>,
            tonic::Status,
        >;
    }
    /// Msg defines the erc20 Msg service.
    #[derive(Debug)]
    pub struct MsgServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> MsgServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for MsgServer<T>
    where
        T: Msg,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/cosmos.evm.erc20.v1.Msg/ConvertERC20" => {
                    #[allow(non_camel_case_types)]
                    struct ConvertERC20Svc<T: Msg>(pub Arc<T>);
                    impl<T: Msg> tonic::server::UnaryService<super::MsgConvertErc20>
                    for ConvertERC20Svc<T> {
                        type Response = super::MsgConvertErc20Response;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgConvertErc20>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::convert_erc20(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ConvertERC20Svc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.evm.erc20.v1.Msg/ConvertCoin" => {
                    #[allow(non_camel_case_types)]
                    struct ConvertCoinSvc<T: Msg>(pub Arc<T>);
                    impl<T: Msg> tonic::server::UnaryService<super::MsgConvertCoin>
                    for ConvertCoinSvc<T> {
                        type Response = super::MsgConvertCoinResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgConvertCoin>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::convert_coin(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ConvertCoinSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.evm.erc20.v1.Msg/UpdateParams" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateParamsSvc<T: Msg>(pub Arc<T>);
                    impl<T: Msg> tonic::server::UnaryService<super::MsgUpdateParams>
                    for UpdateParamsSvc<T> {
                        type Response = super::MsgUpdateParamsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgUpdateParams>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::update_params(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateParamsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.evm.erc20.v1.Msg/RegisterERC20" => {
                    #[allow(non_camel_case_types)]
                    struct RegisterERC20Svc<T: Msg>(pub Arc<T>);
                    impl<T: Msg> tonic::server::UnaryService<super::MsgRegisterErc20>
                    for RegisterERC20Svc<T> {
                        type Response = super::MsgRegisterErc20Response;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgRegisterErc20>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::register_erc20(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RegisterERC20Svc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.evm.erc20.v1.Msg/ToggleConversion" => {
                    #[allow(non_camel_case_types)]
                    struct ToggleConversionSvc<T: Msg>(pub Arc<T>);
                    impl<T: Msg> tonic::server::UnaryService<super::MsgToggleConversion>
                    for ToggleConversionSvc<T> {
                        type Response = super::MsgToggleConversionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgToggleConversion>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::toggle_conversion(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ToggleConversionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for MsgServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "cosmos.evm.erc20.v1.Msg";
    impl<T> tonic::server::NamedService for MsgServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// EventRegisterPair is an event emitted when a coin is registered.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventRegisterPair {
    /// denom is the coin's denomination.
    #[prost(string, tag = "1")]
    pub denom: ::prost::alloc::string::String,
    /// erc20_address is the ERC20 contract address.
    #[prost(string, tag = "2")]
    pub erc20_address: ::prost::alloc::string::String,
}
impl ::prost::Name for EventRegisterPair {
    const NAME: &'static str = "EventRegisterPair";
    const PACKAGE: &'static str = "cosmos.evm.erc20.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.evm.erc20.v1.EventRegisterPair".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.evm.erc20.v1.EventRegisterPair".into()
    }
}
/// EventToggleTokenConversion is an event emitted when a coin's token conversion
/// is toggled.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventToggleTokenConversion {
    /// denom is the coin's denomination.
    #[prost(string, tag = "1")]
    pub denom: ::prost::alloc::string::String,
    /// erc20_address is the ERC20 contract address.
    #[prost(string, tag = "2")]
    pub erc20_address: ::prost::alloc::string::String,
}
impl ::prost::Name for EventToggleTokenConversion {
    const NAME: &'static str = "EventToggleTokenConversion";
    const PACKAGE: &'static str = "cosmos.evm.erc20.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.evm.erc20.v1.EventToggleTokenConversion".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.evm.erc20.v1.EventToggleTokenConversion".into()
    }
}
/// EventConvertCoin is an event emitted when a coin is converted.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventConvertCoin {
    /// sender is the sender's address.
    #[prost(string, tag = "1")]
    pub sender: ::prost::alloc::string::String,
    /// receiver is the receiver's address.
    #[prost(string, tag = "2")]
    pub receiver: ::prost::alloc::string::String,
    /// amount is the amount of coins to be converted.
    #[prost(string, tag = "3")]
    pub amount: ::prost::alloc::string::String,
    /// denom is the coin's denomination.
    #[prost(string, tag = "4")]
    pub denom: ::prost::alloc::string::String,
    /// erc20_address is the ERC20 contract address.
    #[prost(string, tag = "5")]
    pub erc20_address: ::prost::alloc::string::String,
}
impl ::prost::Name for EventConvertCoin {
    const NAME: &'static str = "EventConvertCoin";
    const PACKAGE: &'static str = "cosmos.evm.erc20.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.evm.erc20.v1.EventConvertCoin".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.evm.erc20.v1.EventConvertCoin".into()
    }
}
/// EventConvertERC20 is an event emitted when an ERC20 is converted.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventConvertErc20 {
    /// sender is the sender's address.
    #[prost(string, tag = "1")]
    pub sender: ::prost::alloc::string::String,
    /// receiver is the receiver's address.
    #[prost(string, tag = "2")]
    pub receiver: ::prost::alloc::string::String,
    /// amount is the amount of coins to be converted.
    #[prost(string, tag = "3")]
    pub amount: ::prost::alloc::string::String,
    /// denom is the coin's denomination.
    #[prost(string, tag = "4")]
    pub denom: ::prost::alloc::string::String,
    /// contract_address of an ERC20 token contract, that is registered in a token
    /// pair
    #[prost(string, tag = "5")]
    pub contract_address: ::prost::alloc::string::String,
}
impl ::prost::Name for EventConvertErc20 {
    const NAME: &'static str = "EventConvertERC20";
    const PACKAGE: &'static str = "cosmos.evm.erc20.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.evm.erc20.v1.EventConvertERC20".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.evm.erc20.v1.EventConvertERC20".into()
    }
}
/// QueryTokenPairsRequest is the request type for the Query/TokenPairs RPC
/// method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTokenPairsRequest {
    /// pagination defines an optional pagination for the request.
    #[prost(message, optional, tag = "1")]
    pub pagination: ::core::option::Option<
        ::cosmos_sdk_proto::cosmos::base::query::v1beta1::PageRequest,
    >,
}
impl ::prost::Name for QueryTokenPairsRequest {
    const NAME: &'static str = "QueryTokenPairsRequest";
    const PACKAGE: &'static str = "cosmos.evm.erc20.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.evm.erc20.v1.QueryTokenPairsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.evm.erc20.v1.QueryTokenPairsRequest".into()
    }
}
/// QueryTokenPairsResponse is the response type for the Query/TokenPairs RPC
/// method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTokenPairsResponse {
    /// token_pairs is a slice of registered token pairs for the erc20 module
    #[prost(message, repeated, tag = "1")]
    pub token_pairs: ::prost::alloc::vec::Vec<TokenPair>,
    /// pagination defines the pagination in the response.
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        ::cosmos_sdk_proto::cosmos::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for QueryTokenPairsResponse {
    const NAME: &'static str = "QueryTokenPairsResponse";
    const PACKAGE: &'static str = "cosmos.evm.erc20.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.evm.erc20.v1.QueryTokenPairsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.evm.erc20.v1.QueryTokenPairsResponse".into()
    }
}
/// QueryTokenPairRequest is the request type for the Query/TokenPair RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTokenPairRequest {
    /// token identifier can be either the hex contract address of the ERC20 or the
    /// Cosmos base denomination
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryTokenPairRequest {
    const NAME: &'static str = "QueryTokenPairRequest";
    const PACKAGE: &'static str = "cosmos.evm.erc20.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.evm.erc20.v1.QueryTokenPairRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.evm.erc20.v1.QueryTokenPairRequest".into()
    }
}
/// QueryTokenPairResponse is the response type for the Query/TokenPair RPC
/// method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTokenPairResponse {
    /// token_pairs returns the info about a registered token pair for the erc20
    /// module
    #[prost(message, optional, tag = "1")]
    pub token_pair: ::core::option::Option<TokenPair>,
}
impl ::prost::Name for QueryTokenPairResponse {
    const NAME: &'static str = "QueryTokenPairResponse";
    const PACKAGE: &'static str = "cosmos.evm.erc20.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.evm.erc20.v1.QueryTokenPairResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.evm.erc20.v1.QueryTokenPairResponse".into()
    }
}
/// QueryParamsRequest is the request type for the Query/Params RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryParamsRequest {}
impl ::prost::Name for QueryParamsRequest {
    const NAME: &'static str = "QueryParamsRequest";
    const PACKAGE: &'static str = "cosmos.evm.erc20.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.evm.erc20.v1.QueryParamsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.evm.erc20.v1.QueryParamsRequest".into()
    }
}
/// QueryParamsResponse is the response type for the Query/Params RPC
/// method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryParamsResponse {
    /// params are the erc20 module parameters
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for QueryParamsResponse {
    const NAME: &'static str = "QueryParamsResponse";
    const PACKAGE: &'static str = "cosmos.evm.erc20.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.evm.erc20.v1.QueryParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.evm.erc20.v1.QueryParamsResponse".into()
    }
}
/// Generated client implementations.
#[cfg(feature = "client")]
pub mod query_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Query defines the gRPC querier service.
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    #[cfg(feature = "transport")]
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// TokenPairs retrieves registered token pairs (mappings)x
        pub async fn token_pairs(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryTokenPairsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryTokenPairsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.evm.erc20.v1.Query/TokenPairs",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.evm.erc20.v1.Query", "TokenPairs"));
            self.inner.unary(req, path, codec).await
        }
        /// TokenPair retrieves a registered token pair (mapping)
        pub async fn token_pair(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryTokenPairRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryTokenPairResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.evm.erc20.v1.Query/TokenPair",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.evm.erc20.v1.Query", "TokenPair"));
            self.inner.unary(req, path, codec).await
        }
        /// Params retrieves the erc20 module params
        pub async fn params(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.evm.erc20.v1.Query/Params",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.evm.erc20.v1.Query", "Params"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "server")]
pub mod query_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with QueryServer.
    #[async_trait]
    pub trait Query: std::marker::Send + std::marker::Sync + 'static {
        /// TokenPairs retrieves registered token pairs (mappings)x
        async fn token_pairs(
            &self,
            request: tonic::Request<super::QueryTokenPairsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryTokenPairsResponse>,
            tonic::Status,
        >;
        /// TokenPair retrieves a registered token pair (mapping)
        async fn token_pair(
            &self,
            request: tonic::Request<super::QueryTokenPairRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryTokenPairResponse>,
            tonic::Status,
        >;
        /// Params retrieves the erc20 module params
        async fn params(
            &self,
            request: tonic::Request<super::QueryParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryParamsResponse>,
            tonic::Status,
        >;
    }
    /// Query defines the gRPC querier service.
    #[derive(Debug)]
    pub struct QueryServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> QueryServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for QueryServer<T>
    where
        T: Query,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/cosmos.evm.erc20.v1.Query/TokenPairs" => {
                    #[allow(non_camel_case_types)]
                    struct TokenPairsSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryTokenPairsRequest>
                    for TokenPairsSvc<T> {
                        type Response = super::QueryTokenPairsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryTokenPairsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::token_pairs(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = TokenPairsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.evm.erc20.v1.Query/TokenPair" => {
                    #[allow(non_camel_case_types)]
                    struct TokenPairSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryTokenPairRequest>
                    for TokenPairSvc<T> {
                        type Response = super::QueryTokenPairResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryTokenPairRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::token_pair(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = TokenPairSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.evm.erc20.v1.Query/Params" => {
                    #[allow(non_camel_case_types)]
                    struct ParamsSvc<T: Query>(pub Arc<T>);
                    impl<T: Query> tonic::server::UnaryService<super::QueryParamsRequest>
                    for ParamsSvc<T> {
                        type Response = super::QueryParamsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryParamsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::params(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ParamsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for QueryServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "cosmos.evm.erc20.v1.Query";
    impl<T> tonic::server::NamedService for QueryServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
