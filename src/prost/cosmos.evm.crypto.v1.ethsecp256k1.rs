// This file is @generated by prost-build.
/// PubKey defines a type alias for an ecdsa.PublicKey that implements
/// CometBFT's PubKey interface. It represents the 33-byte compressed public
/// key format.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PubKey {
    /// key is the public key in byte form
    #[prost(bytes = "vec", tag = "1")]
    pub key: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for PubKey {
    const NAME: &'static str = "PubKey";
    const PACKAGE: &'static str = "cosmos.evm.crypto.v1.ethsecp256k1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.evm.crypto.v1.ethsecp256k1.PubKey".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.evm.crypto.v1.ethsecp256k1.PubKey".into()
    }
}
/// PrivKey defines a type alias for an ecdsa.PrivateKey that implements
/// CometBFT's PrivateKey interface.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PrivKey {
    /// key is the private key in byte form
    #[prost(bytes = "vec", tag = "1")]
    pub key: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for PrivKey {
    const NAME: &'static str = "PrivKey";
    const PACKAGE: &'static str = "cosmos.evm.crypto.v1.ethsecp256k1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.evm.crypto.v1.ethsecp256k1.PrivKey".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.evm.crypto.v1.ethsecp256k1.PrivKey".into()
    }
}
