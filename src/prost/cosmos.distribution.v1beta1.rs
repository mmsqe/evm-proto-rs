// This file is @generated by prost-build.
/// Params defines the set of params for the distribution module.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Params {
    #[prost(string, tag = "1")]
    pub community_tax: ::prost::alloc::string::String,
    /// Deprecated: The base_proposer_reward field is deprecated and is no longer used
    /// in the x/distribution module's reward mechanism.
    #[deprecated]
    #[prost(string, tag = "2")]
    pub base_proposer_reward: ::prost::alloc::string::String,
    /// Deprecated: The bonus_proposer_reward field is deprecated and is no longer used
    /// in the x/distribution module's reward mechanism.
    #[deprecated]
    #[prost(string, tag = "3")]
    pub bonus_proposer_reward: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub withdraw_addr_enabled: bool,
}
impl ::prost::Name for Params {
    const NAME: &'static str = "Params";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.Params".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.Params".into()
    }
}
/// ValidatorHistoricalRewards represents historical rewards for a validator.
/// Height is implicit within the store key.
/// Cumulative reward ratio is the sum from the zeroeth period
/// until this period of rewards / tokens, per the spec.
/// The reference count indicates the number of objects
/// which might need to reference this historical entry at any point.
/// ReferenceCount =
///     number of outstanding delegations which ended the associated period (and
///     might need to read that record)
///   + number of slashes which ended the associated period (and might need to
///   read that record)
///   + one per validator for the zeroeth period, set on initialization
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidatorHistoricalRewards {
    #[prost(message, repeated, tag = "1")]
    pub cumulative_reward_ratio: ::prost::alloc::vec::Vec<
        ::cosmos_sdk_proto::cosmos::base::v1beta1::DecCoin,
    >,
    #[prost(uint32, tag = "2")]
    pub reference_count: u32,
}
impl ::prost::Name for ValidatorHistoricalRewards {
    const NAME: &'static str = "ValidatorHistoricalRewards";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.ValidatorHistoricalRewards".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.ValidatorHistoricalRewards".into()
    }
}
/// ValidatorCurrentRewards represents current rewards and current
/// period for a validator kept as a running counter and incremented
/// each block as long as the validator's tokens remain constant.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidatorCurrentRewards {
    #[prost(message, repeated, tag = "1")]
    pub rewards: ::prost::alloc::vec::Vec<
        ::cosmos_sdk_proto::cosmos::base::v1beta1::DecCoin,
    >,
    #[prost(uint64, tag = "2")]
    pub period: u64,
}
impl ::prost::Name for ValidatorCurrentRewards {
    const NAME: &'static str = "ValidatorCurrentRewards";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.ValidatorCurrentRewards".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.ValidatorCurrentRewards".into()
    }
}
/// ValidatorAccumulatedCommission represents accumulated commission
/// for a validator kept as a running counter, can be withdrawn at any time.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidatorAccumulatedCommission {
    #[prost(message, repeated, tag = "1")]
    pub commission: ::prost::alloc::vec::Vec<
        ::cosmos_sdk_proto::cosmos::base::v1beta1::DecCoin,
    >,
}
impl ::prost::Name for ValidatorAccumulatedCommission {
    const NAME: &'static str = "ValidatorAccumulatedCommission";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.ValidatorAccumulatedCommission".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.ValidatorAccumulatedCommission".into()
    }
}
/// ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards
/// for a validator inexpensive to track, allows simple sanity checks.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidatorOutstandingRewards {
    #[prost(message, repeated, tag = "1")]
    pub rewards: ::prost::alloc::vec::Vec<
        ::cosmos_sdk_proto::cosmos::base::v1beta1::DecCoin,
    >,
}
impl ::prost::Name for ValidatorOutstandingRewards {
    const NAME: &'static str = "ValidatorOutstandingRewards";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.ValidatorOutstandingRewards".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.ValidatorOutstandingRewards".into()
    }
}
/// ValidatorSlashEvent represents a validator slash event.
/// Height is implicit within the store key.
/// This is needed to calculate appropriate amount of staking tokens
/// for delegations which are withdrawn after a slash has occurred.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidatorSlashEvent {
    #[prost(uint64, tag = "1")]
    pub validator_period: u64,
    #[prost(string, tag = "2")]
    pub fraction: ::prost::alloc::string::String,
}
impl ::prost::Name for ValidatorSlashEvent {
    const NAME: &'static str = "ValidatorSlashEvent";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.ValidatorSlashEvent".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.ValidatorSlashEvent".into()
    }
}
/// ValidatorSlashEvents is a collection of ValidatorSlashEvent messages.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidatorSlashEvents {
    #[prost(message, repeated, tag = "1")]
    pub validator_slash_events: ::prost::alloc::vec::Vec<ValidatorSlashEvent>,
}
impl ::prost::Name for ValidatorSlashEvents {
    const NAME: &'static str = "ValidatorSlashEvents";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.ValidatorSlashEvents".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.ValidatorSlashEvents".into()
    }
}
/// FeePool is the global fee pool for distribution.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FeePool {
    #[prost(message, repeated, tag = "1")]
    pub community_pool: ::prost::alloc::vec::Vec<
        ::cosmos_sdk_proto::cosmos::base::v1beta1::DecCoin,
    >,
}
impl ::prost::Name for FeePool {
    const NAME: &'static str = "FeePool";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.FeePool".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.FeePool".into()
    }
}
/// CommunityPoolSpendProposal details a proposal for use of community funds,
/// together with how many coins are proposed to be spent, and to which
/// recipient account.
///
/// Deprecated: Do not use. As of the Cosmos SDK release v0.47.x, there is no
/// longer a need for an explicit CommunityPoolSpendProposal. To spend community
/// pool funds, a simple MsgCommunityPoolSpend can be invoked from the x/gov
/// module via a v1 governance proposal.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommunityPoolSpendProposal {
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub recipient: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "4")]
    pub amount: ::prost::alloc::vec::Vec<
        ::cosmos_sdk_proto::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for CommunityPoolSpendProposal {
    const NAME: &'static str = "CommunityPoolSpendProposal";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.CommunityPoolSpendProposal".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.CommunityPoolSpendProposal".into()
    }
}
/// DelegatorStartingInfo represents the starting info for a delegator reward
/// period. It tracks the previous validator period, the delegation's amount of
/// staking token, and the creation height (to check later on if any slashes have
/// occurred). NOTE: Even though validators are slashed to whole staking tokens,
/// the delegators within the validator may be left with less than a full token,
/// thus sdk.Dec is used.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DelegatorStartingInfo {
    #[prost(uint64, tag = "1")]
    pub previous_period: u64,
    #[prost(string, tag = "2")]
    pub stake: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub height: u64,
}
impl ::prost::Name for DelegatorStartingInfo {
    const NAME: &'static str = "DelegatorStartingInfo";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.DelegatorStartingInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.DelegatorStartingInfo".into()
    }
}
/// DelegationDelegatorReward represents the properties
/// of a delegator's delegation reward.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DelegationDelegatorReward {
    #[prost(string, tag = "1")]
    pub validator_address: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub reward: ::prost::alloc::vec::Vec<
        ::cosmos_sdk_proto::cosmos::base::v1beta1::DecCoin,
    >,
}
impl ::prost::Name for DelegationDelegatorReward {
    const NAME: &'static str = "DelegationDelegatorReward";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.DelegationDelegatorReward".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.DelegationDelegatorReward".into()
    }
}
/// CommunityPoolSpendProposalWithDeposit defines a CommunityPoolSpendProposal
/// with a deposit
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommunityPoolSpendProposalWithDeposit {
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub recipient: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub amount: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub deposit: ::prost::alloc::string::String,
}
impl ::prost::Name for CommunityPoolSpendProposalWithDeposit {
    const NAME: &'static str = "CommunityPoolSpendProposalWithDeposit";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit".into()
    }
}
/// MsgSetWithdrawAddress sets the withdraw address for
/// a delegator (or validator self-delegation).
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSetWithdrawAddress {
    #[prost(string, tag = "1")]
    pub delegator_address: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub withdraw_address: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgSetWithdrawAddress {
    const NAME: &'static str = "MsgSetWithdrawAddress";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.MsgSetWithdrawAddress".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.MsgSetWithdrawAddress".into()
    }
}
/// MsgSetWithdrawAddressResponse defines the Msg/SetWithdrawAddress response
/// type.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgSetWithdrawAddressResponse {}
impl ::prost::Name for MsgSetWithdrawAddressResponse {
    const NAME: &'static str = "MsgSetWithdrawAddressResponse";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.MsgSetWithdrawAddressResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.MsgSetWithdrawAddressResponse".into()
    }
}
/// MsgWithdrawDelegatorReward represents delegation withdrawal to a delegator
/// from a single validator.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgWithdrawDelegatorReward {
    #[prost(string, tag = "1")]
    pub delegator_address: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub validator_address: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgWithdrawDelegatorReward {
    const NAME: &'static str = "MsgWithdrawDelegatorReward";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward".into()
    }
}
/// MsgWithdrawDelegatorRewardResponse defines the Msg/WithdrawDelegatorReward
/// response type.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgWithdrawDelegatorRewardResponse {
    #[prost(message, repeated, tag = "1")]
    pub amount: ::prost::alloc::vec::Vec<
        ::cosmos_sdk_proto::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for MsgWithdrawDelegatorRewardResponse {
    const NAME: &'static str = "MsgWithdrawDelegatorRewardResponse";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.MsgWithdrawDelegatorRewardResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.MsgWithdrawDelegatorRewardResponse".into()
    }
}
/// MsgWithdrawValidatorCommission withdraws the full commission to the validator
/// address.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgWithdrawValidatorCommission {
    #[prost(string, tag = "1")]
    pub validator_address: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgWithdrawValidatorCommission {
    const NAME: &'static str = "MsgWithdrawValidatorCommission";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission".into()
    }
}
/// MsgWithdrawValidatorCommissionResponse defines the
/// Msg/WithdrawValidatorCommission response type.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgWithdrawValidatorCommissionResponse {
    #[prost(message, repeated, tag = "1")]
    pub amount: ::prost::alloc::vec::Vec<
        ::cosmos_sdk_proto::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for MsgWithdrawValidatorCommissionResponse {
    const NAME: &'static str = "MsgWithdrawValidatorCommissionResponse";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.MsgWithdrawValidatorCommissionResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommissionResponse".into()
    }
}
/// MsgFundCommunityPool allows an account to directly
/// fund the community pool.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgFundCommunityPool {
    #[prost(message, repeated, tag = "1")]
    pub amount: ::prost::alloc::vec::Vec<
        ::cosmos_sdk_proto::cosmos::base::v1beta1::Coin,
    >,
    #[prost(string, tag = "2")]
    pub depositor: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgFundCommunityPool {
    const NAME: &'static str = "MsgFundCommunityPool";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.MsgFundCommunityPool".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.MsgFundCommunityPool".into()
    }
}
/// MsgFundCommunityPoolResponse defines the Msg/FundCommunityPool response type.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgFundCommunityPoolResponse {}
impl ::prost::Name for MsgFundCommunityPoolResponse {
    const NAME: &'static str = "MsgFundCommunityPoolResponse";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.MsgFundCommunityPoolResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.MsgFundCommunityPoolResponse".into()
    }
}
/// MsgUpdateParams is the Msg/UpdateParams request type.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParams {
    /// authority is the address that controls the module (defaults to x/gov unless overwritten).
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// params defines the x/distribution parameters to update.
    ///
    /// NOTE: All parameters must be supplied.
    #[prost(message, optional, tag = "2")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for MsgUpdateParams {
    const NAME: &'static str = "MsgUpdateParams";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.MsgUpdateParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.MsgUpdateParams".into()
    }
}
/// MsgUpdateParamsResponse defines the response structure for executing a
/// MsgUpdateParams message.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgUpdateParamsResponse {}
impl ::prost::Name for MsgUpdateParamsResponse {
    const NAME: &'static str = "MsgUpdateParamsResponse";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.MsgUpdateParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.MsgUpdateParamsResponse".into()
    }
}
/// MsgCommunityPoolSpend defines a message for sending tokens from the community
/// pool to another account. This message is typically executed via a governance
/// proposal with the governance module being the executing authority.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCommunityPoolSpend {
    /// authority is the address that controls the module (defaults to x/gov unless overwritten).
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub recipient: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub amount: ::prost::alloc::vec::Vec<
        ::cosmos_sdk_proto::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for MsgCommunityPoolSpend {
    const NAME: &'static str = "MsgCommunityPoolSpend";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.MsgCommunityPoolSpend".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.MsgCommunityPoolSpend".into()
    }
}
/// MsgCommunityPoolSpendResponse defines the response to executing a
/// MsgCommunityPoolSpend message.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgCommunityPoolSpendResponse {}
impl ::prost::Name for MsgCommunityPoolSpendResponse {
    const NAME: &'static str = "MsgCommunityPoolSpendResponse";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.MsgCommunityPoolSpendResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.MsgCommunityPoolSpendResponse".into()
    }
}
/// DepositValidatorRewardsPool defines the request structure to provide
/// additional rewards to delegators from a specific validator.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgDepositValidatorRewardsPool {
    #[prost(string, tag = "1")]
    pub depositor: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub validator_address: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub amount: ::prost::alloc::vec::Vec<
        ::cosmos_sdk_proto::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for MsgDepositValidatorRewardsPool {
    const NAME: &'static str = "MsgDepositValidatorRewardsPool";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.MsgDepositValidatorRewardsPool".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.MsgDepositValidatorRewardsPool".into()
    }
}
/// MsgDepositValidatorRewardsPoolResponse defines the response to executing a
/// MsgDepositValidatorRewardsPool message.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgDepositValidatorRewardsPoolResponse {}
impl ::prost::Name for MsgDepositValidatorRewardsPoolResponse {
    const NAME: &'static str = "MsgDepositValidatorRewardsPoolResponse";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.MsgDepositValidatorRewardsPoolResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.MsgDepositValidatorRewardsPoolResponse".into()
    }
}
/// Generated client implementations.
#[cfg(feature = "client")]
pub mod msg_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Msg defines the distribution Msg service.
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    #[cfg(feature = "transport")]
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// SetWithdrawAddress defines a method to change the withdraw address
        /// for a delegator (or validator self-delegation).
        pub async fn set_withdraw_address(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgSetWithdrawAddress>,
        ) -> std::result::Result<
            tonic::Response<super::MsgSetWithdrawAddressResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Msg/SetWithdrawAddress",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.distribution.v1beta1.Msg",
                        "SetWithdrawAddress",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// WithdrawDelegatorReward defines a method to withdraw rewards of delegator
        /// from a single validator.
        pub async fn withdraw_delegator_reward(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgWithdrawDelegatorReward>,
        ) -> std::result::Result<
            tonic::Response<super::MsgWithdrawDelegatorRewardResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Msg/WithdrawDelegatorReward",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.distribution.v1beta1.Msg",
                        "WithdrawDelegatorReward",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// WithdrawValidatorCommission defines a method to withdraw the
        /// full commission to the validator address.
        pub async fn withdraw_validator_commission(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgWithdrawValidatorCommission>,
        ) -> std::result::Result<
            tonic::Response<super::MsgWithdrawValidatorCommissionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Msg/WithdrawValidatorCommission",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.distribution.v1beta1.Msg",
                        "WithdrawValidatorCommission",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// FundCommunityPool defines a method to allow an account to directly
        /// fund the community pool.
        ///
        /// WARNING: This method will fail if an external community pool is used.
        pub async fn fund_community_pool(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgFundCommunityPool>,
        ) -> std::result::Result<
            tonic::Response<super::MsgFundCommunityPoolResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Msg/FundCommunityPool",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.distribution.v1beta1.Msg",
                        "FundCommunityPool",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// UpdateParams defines a governance operation for updating the x/distribution
        /// module parameters. The authority is defined in the keeper.
        pub async fn update_params(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpdateParams>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Msg/UpdateParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("cosmos.distribution.v1beta1.Msg", "UpdateParams"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// CommunityPoolSpend defines a governance operation for sending tokens from
        /// the community pool in the x/distribution module to another account, which
        /// could be the governance module itself. The authority is defined in the
        /// keeper.
        ///
        /// WARNING: This method will fail if an external community pool is used.
        pub async fn community_pool_spend(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgCommunityPoolSpend>,
        ) -> std::result::Result<
            tonic::Response<super::MsgCommunityPoolSpendResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Msg/CommunityPoolSpend",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.distribution.v1beta1.Msg",
                        "CommunityPoolSpend",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// DepositValidatorRewardsPool defines a method to provide additional rewards
        /// to delegators to a specific validator.
        pub async fn deposit_validator_rewards_pool(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgDepositValidatorRewardsPool>,
        ) -> std::result::Result<
            tonic::Response<super::MsgDepositValidatorRewardsPoolResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Msg/DepositValidatorRewardsPool",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.distribution.v1beta1.Msg",
                        "DepositValidatorRewardsPool",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "server")]
pub mod msg_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MsgServer.
    #[async_trait]
    pub trait Msg: std::marker::Send + std::marker::Sync + 'static {
        /// SetWithdrawAddress defines a method to change the withdraw address
        /// for a delegator (or validator self-delegation).
        async fn set_withdraw_address(
            &self,
            request: tonic::Request<super::MsgSetWithdrawAddress>,
        ) -> std::result::Result<
            tonic::Response<super::MsgSetWithdrawAddressResponse>,
            tonic::Status,
        >;
        /// WithdrawDelegatorReward defines a method to withdraw rewards of delegator
        /// from a single validator.
        async fn withdraw_delegator_reward(
            &self,
            request: tonic::Request<super::MsgWithdrawDelegatorReward>,
        ) -> std::result::Result<
            tonic::Response<super::MsgWithdrawDelegatorRewardResponse>,
            tonic::Status,
        >;
        /// WithdrawValidatorCommission defines a method to withdraw the
        /// full commission to the validator address.
        async fn withdraw_validator_commission(
            &self,
            request: tonic::Request<super::MsgWithdrawValidatorCommission>,
        ) -> std::result::Result<
            tonic::Response<super::MsgWithdrawValidatorCommissionResponse>,
            tonic::Status,
        >;
        /// FundCommunityPool defines a method to allow an account to directly
        /// fund the community pool.
        ///
        /// WARNING: This method will fail if an external community pool is used.
        async fn fund_community_pool(
            &self,
            request: tonic::Request<super::MsgFundCommunityPool>,
        ) -> std::result::Result<
            tonic::Response<super::MsgFundCommunityPoolResponse>,
            tonic::Status,
        >;
        /// UpdateParams defines a governance operation for updating the x/distribution
        /// module parameters. The authority is defined in the keeper.
        async fn update_params(
            &self,
            request: tonic::Request<super::MsgUpdateParams>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateParamsResponse>,
            tonic::Status,
        >;
        /// CommunityPoolSpend defines a governance operation for sending tokens from
        /// the community pool in the x/distribution module to another account, which
        /// could be the governance module itself. The authority is defined in the
        /// keeper.
        ///
        /// WARNING: This method will fail if an external community pool is used.
        async fn community_pool_spend(
            &self,
            request: tonic::Request<super::MsgCommunityPoolSpend>,
        ) -> std::result::Result<
            tonic::Response<super::MsgCommunityPoolSpendResponse>,
            tonic::Status,
        >;
        /// DepositValidatorRewardsPool defines a method to provide additional rewards
        /// to delegators to a specific validator.
        async fn deposit_validator_rewards_pool(
            &self,
            request: tonic::Request<super::MsgDepositValidatorRewardsPool>,
        ) -> std::result::Result<
            tonic::Response<super::MsgDepositValidatorRewardsPoolResponse>,
            tonic::Status,
        >;
    }
    /// Msg defines the distribution Msg service.
    #[derive(Debug)]
    pub struct MsgServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> MsgServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for MsgServer<T>
    where
        T: Msg,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/cosmos.distribution.v1beta1.Msg/SetWithdrawAddress" => {
                    #[allow(non_camel_case_types)]
                    struct SetWithdrawAddressSvc<T: Msg>(pub Arc<T>);
                    impl<
                        T: Msg,
                    > tonic::server::UnaryService<super::MsgSetWithdrawAddress>
                    for SetWithdrawAddressSvc<T> {
                        type Response = super::MsgSetWithdrawAddressResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgSetWithdrawAddress>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::set_withdraw_address(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SetWithdrawAddressSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.distribution.v1beta1.Msg/WithdrawDelegatorReward" => {
                    #[allow(non_camel_case_types)]
                    struct WithdrawDelegatorRewardSvc<T: Msg>(pub Arc<T>);
                    impl<
                        T: Msg,
                    > tonic::server::UnaryService<super::MsgWithdrawDelegatorReward>
                    for WithdrawDelegatorRewardSvc<T> {
                        type Response = super::MsgWithdrawDelegatorRewardResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgWithdrawDelegatorReward>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::withdraw_delegator_reward(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = WithdrawDelegatorRewardSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.distribution.v1beta1.Msg/WithdrawValidatorCommission" => {
                    #[allow(non_camel_case_types)]
                    struct WithdrawValidatorCommissionSvc<T: Msg>(pub Arc<T>);
                    impl<
                        T: Msg,
                    > tonic::server::UnaryService<super::MsgWithdrawValidatorCommission>
                    for WithdrawValidatorCommissionSvc<T> {
                        type Response = super::MsgWithdrawValidatorCommissionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::MsgWithdrawValidatorCommission,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::withdraw_validator_commission(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = WithdrawValidatorCommissionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.distribution.v1beta1.Msg/FundCommunityPool" => {
                    #[allow(non_camel_case_types)]
                    struct FundCommunityPoolSvc<T: Msg>(pub Arc<T>);
                    impl<T: Msg> tonic::server::UnaryService<super::MsgFundCommunityPool>
                    for FundCommunityPoolSvc<T> {
                        type Response = super::MsgFundCommunityPoolResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgFundCommunityPool>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::fund_community_pool(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FundCommunityPoolSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.distribution.v1beta1.Msg/UpdateParams" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateParamsSvc<T: Msg>(pub Arc<T>);
                    impl<T: Msg> tonic::server::UnaryService<super::MsgUpdateParams>
                    for UpdateParamsSvc<T> {
                        type Response = super::MsgUpdateParamsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgUpdateParams>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::update_params(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateParamsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.distribution.v1beta1.Msg/CommunityPoolSpend" => {
                    #[allow(non_camel_case_types)]
                    struct CommunityPoolSpendSvc<T: Msg>(pub Arc<T>);
                    impl<
                        T: Msg,
                    > tonic::server::UnaryService<super::MsgCommunityPoolSpend>
                    for CommunityPoolSpendSvc<T> {
                        type Response = super::MsgCommunityPoolSpendResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgCommunityPoolSpend>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::community_pool_spend(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CommunityPoolSpendSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.distribution.v1beta1.Msg/DepositValidatorRewardsPool" => {
                    #[allow(non_camel_case_types)]
                    struct DepositValidatorRewardsPoolSvc<T: Msg>(pub Arc<T>);
                    impl<
                        T: Msg,
                    > tonic::server::UnaryService<super::MsgDepositValidatorRewardsPool>
                    for DepositValidatorRewardsPoolSvc<T> {
                        type Response = super::MsgDepositValidatorRewardsPoolResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::MsgDepositValidatorRewardsPool,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::deposit_validator_rewards_pool(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DepositValidatorRewardsPoolSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for MsgServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "cosmos.distribution.v1beta1.Msg";
    impl<T> tonic::server::NamedService for MsgServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// QueryParamsRequest is the request type for the Query/Params RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryParamsRequest {}
impl ::prost::Name for QueryParamsRequest {
    const NAME: &'static str = "QueryParamsRequest";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.QueryParamsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.QueryParamsRequest".into()
    }
}
/// QueryParamsResponse is the response type for the Query/Params RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryParamsResponse {
    /// params defines the parameters of the module.
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for QueryParamsResponse {
    const NAME: &'static str = "QueryParamsResponse";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.QueryParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.QueryParamsResponse".into()
    }
}
/// QueryValidatorDistributionInfoRequest is the request type for the Query/ValidatorDistributionInfo RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryValidatorDistributionInfoRequest {
    /// validator_address defines the validator address to query for.
    #[prost(string, tag = "1")]
    pub validator_address: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryValidatorDistributionInfoRequest {
    const NAME: &'static str = "QueryValidatorDistributionInfoRequest";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.QueryValidatorDistributionInfoRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.QueryValidatorDistributionInfoRequest".into()
    }
}
/// QueryValidatorDistributionInfoResponse is the response type for the Query/ValidatorDistributionInfo RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryValidatorDistributionInfoResponse {
    /// operator_address defines the validator operator address.
    #[prost(string, tag = "1")]
    pub operator_address: ::prost::alloc::string::String,
    /// self_bond_rewards defines the self delegations rewards.
    #[prost(message, repeated, tag = "2")]
    pub self_bond_rewards: ::prost::alloc::vec::Vec<
        ::cosmos_sdk_proto::cosmos::base::v1beta1::DecCoin,
    >,
    /// commission defines the commission the validator received.
    #[prost(message, repeated, tag = "3")]
    pub commission: ::prost::alloc::vec::Vec<
        ::cosmos_sdk_proto::cosmos::base::v1beta1::DecCoin,
    >,
}
impl ::prost::Name for QueryValidatorDistributionInfoResponse {
    const NAME: &'static str = "QueryValidatorDistributionInfoResponse";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.QueryValidatorDistributionInfoResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.QueryValidatorDistributionInfoResponse".into()
    }
}
/// QueryValidatorOutstandingRewardsRequest is the request type for the
/// Query/ValidatorOutstandingRewards RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryValidatorOutstandingRewardsRequest {
    /// validator_address defines the validator address to query for.
    #[prost(string, tag = "1")]
    pub validator_address: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryValidatorOutstandingRewardsRequest {
    const NAME: &'static str = "QueryValidatorOutstandingRewardsRequest";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsRequest".into()
    }
}
/// QueryValidatorOutstandingRewardsResponse is the response type for the
/// Query/ValidatorOutstandingRewards RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryValidatorOutstandingRewardsResponse {
    #[prost(message, optional, tag = "1")]
    pub rewards: ::core::option::Option<ValidatorOutstandingRewards>,
}
impl ::prost::Name for QueryValidatorOutstandingRewardsResponse {
    const NAME: &'static str = "QueryValidatorOutstandingRewardsResponse";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsResponse".into()
    }
}
/// QueryValidatorCommissionRequest is the request type for the
/// Query/ValidatorCommission RPC method
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryValidatorCommissionRequest {
    /// validator_address defines the validator address to query for.
    #[prost(string, tag = "1")]
    pub validator_address: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryValidatorCommissionRequest {
    const NAME: &'static str = "QueryValidatorCommissionRequest";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.QueryValidatorCommissionRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.QueryValidatorCommissionRequest".into()
    }
}
/// QueryValidatorCommissionResponse is the response type for the
/// Query/ValidatorCommission RPC method
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryValidatorCommissionResponse {
    /// commission defines the commission the validator received.
    #[prost(message, optional, tag = "1")]
    pub commission: ::core::option::Option<ValidatorAccumulatedCommission>,
}
impl ::prost::Name for QueryValidatorCommissionResponse {
    const NAME: &'static str = "QueryValidatorCommissionResponse";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.QueryValidatorCommissionResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.QueryValidatorCommissionResponse".into()
    }
}
/// QueryValidatorSlashesRequest is the request type for the
/// Query/ValidatorSlashes RPC method
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryValidatorSlashesRequest {
    /// validator_address defines the validator address to query for.
    #[prost(string, tag = "1")]
    pub validator_address: ::prost::alloc::string::String,
    /// starting_height defines the optional starting height to query the slashes.
    #[prost(uint64, tag = "2")]
    pub starting_height: u64,
    /// starting_height defines the optional ending height to query the slashes.
    #[prost(uint64, tag = "3")]
    pub ending_height: u64,
    /// pagination defines an optional pagination for the request.
    #[prost(message, optional, tag = "4")]
    pub pagination: ::core::option::Option<
        ::cosmos_sdk_proto::cosmos::base::query::v1beta1::PageRequest,
    >,
}
impl ::prost::Name for QueryValidatorSlashesRequest {
    const NAME: &'static str = "QueryValidatorSlashesRequest";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.QueryValidatorSlashesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.QueryValidatorSlashesRequest".into()
    }
}
/// QueryValidatorSlashesResponse is the response type for the
/// Query/ValidatorSlashes RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryValidatorSlashesResponse {
    /// slashes defines the slashes the validator received.
    #[prost(message, repeated, tag = "1")]
    pub slashes: ::prost::alloc::vec::Vec<ValidatorSlashEvent>,
    /// pagination defines the pagination in the response.
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        ::cosmos_sdk_proto::cosmos::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for QueryValidatorSlashesResponse {
    const NAME: &'static str = "QueryValidatorSlashesResponse";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.QueryValidatorSlashesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.QueryValidatorSlashesResponse".into()
    }
}
/// QueryDelegationRewardsRequest is the request type for the
/// Query/DelegationRewards RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDelegationRewardsRequest {
    /// delegator_address defines the delegator address to query for.
    #[prost(string, tag = "1")]
    pub delegator_address: ::prost::alloc::string::String,
    /// validator_address defines the validator address to query for.
    #[prost(string, tag = "2")]
    pub validator_address: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryDelegationRewardsRequest {
    const NAME: &'static str = "QueryDelegationRewardsRequest";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.QueryDelegationRewardsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.QueryDelegationRewardsRequest".into()
    }
}
/// QueryDelegationRewardsResponse is the response type for the
/// Query/DelegationRewards RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDelegationRewardsResponse {
    /// rewards defines the rewards accrued by a delegation.
    #[prost(message, repeated, tag = "1")]
    pub rewards: ::prost::alloc::vec::Vec<
        ::cosmos_sdk_proto::cosmos::base::v1beta1::DecCoin,
    >,
}
impl ::prost::Name for QueryDelegationRewardsResponse {
    const NAME: &'static str = "QueryDelegationRewardsResponse";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.QueryDelegationRewardsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.QueryDelegationRewardsResponse".into()
    }
}
/// QueryDelegationTotalRewardsRequest is the request type for the
/// Query/DelegationTotalRewards RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDelegationTotalRewardsRequest {
    /// delegator_address defines the delegator address to query for.
    #[prost(string, tag = "1")]
    pub delegator_address: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryDelegationTotalRewardsRequest {
    const NAME: &'static str = "QueryDelegationTotalRewardsRequest";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.QueryDelegationTotalRewardsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.QueryDelegationTotalRewardsRequest".into()
    }
}
/// QueryDelegationTotalRewardsResponse is the response type for the
/// Query/DelegationTotalRewards RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDelegationTotalRewardsResponse {
    /// rewards defines all the rewards accrued by a delegator.
    #[prost(message, repeated, tag = "1")]
    pub rewards: ::prost::alloc::vec::Vec<DelegationDelegatorReward>,
    /// total defines the sum of all the rewards.
    #[prost(message, repeated, tag = "2")]
    pub total: ::prost::alloc::vec::Vec<
        ::cosmos_sdk_proto::cosmos::base::v1beta1::DecCoin,
    >,
}
impl ::prost::Name for QueryDelegationTotalRewardsResponse {
    const NAME: &'static str = "QueryDelegationTotalRewardsResponse";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse".into()
    }
}
/// QueryDelegatorValidatorsRequest is the request type for the
/// Query/DelegatorValidators RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDelegatorValidatorsRequest {
    /// delegator_address defines the delegator address to query for.
    #[prost(string, tag = "1")]
    pub delegator_address: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryDelegatorValidatorsRequest {
    const NAME: &'static str = "QueryDelegatorValidatorsRequest";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.QueryDelegatorValidatorsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.QueryDelegatorValidatorsRequest".into()
    }
}
/// QueryDelegatorValidatorsResponse is the response type for the
/// Query/DelegatorValidators RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDelegatorValidatorsResponse {
    /// validators defines the validators a delegator is delegating for.
    #[prost(string, repeated, tag = "1")]
    pub validators: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for QueryDelegatorValidatorsResponse {
    const NAME: &'static str = "QueryDelegatorValidatorsResponse";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.QueryDelegatorValidatorsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.QueryDelegatorValidatorsResponse".into()
    }
}
/// QueryDelegatorWithdrawAddressRequest is the request type for the
/// Query/DelegatorWithdrawAddress RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDelegatorWithdrawAddressRequest {
    /// delegator_address defines the delegator address to query for.
    #[prost(string, tag = "1")]
    pub delegator_address: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryDelegatorWithdrawAddressRequest {
    const NAME: &'static str = "QueryDelegatorWithdrawAddressRequest";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressRequest".into()
    }
}
/// QueryDelegatorWithdrawAddressResponse is the response type for the
/// Query/DelegatorWithdrawAddress RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDelegatorWithdrawAddressResponse {
    /// withdraw_address defines the delegator address to query for.
    #[prost(string, tag = "1")]
    pub withdraw_address: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryDelegatorWithdrawAddressResponse {
    const NAME: &'static str = "QueryDelegatorWithdrawAddressResponse";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressResponse".into()
    }
}
/// QueryCommunityPoolRequest is the request type for the Query/CommunityPool RPC
/// method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryCommunityPoolRequest {}
impl ::prost::Name for QueryCommunityPoolRequest {
    const NAME: &'static str = "QueryCommunityPoolRequest";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.QueryCommunityPoolRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.QueryCommunityPoolRequest".into()
    }
}
/// QueryCommunityPoolResponse is the response type for the Query/CommunityPool
/// RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryCommunityPoolResponse {
    /// pool defines community pool's coins.
    #[prost(message, repeated, tag = "1")]
    pub pool: ::prost::alloc::vec::Vec<
        ::cosmos_sdk_proto::cosmos::base::v1beta1::DecCoin,
    >,
}
impl ::prost::Name for QueryCommunityPoolResponse {
    const NAME: &'static str = "QueryCommunityPoolResponse";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.QueryCommunityPoolResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.QueryCommunityPoolResponse".into()
    }
}
/// Generated client implementations.
#[cfg(feature = "client")]
pub mod query_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Query defines the gRPC querier service for distribution module.
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    #[cfg(feature = "transport")]
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Params queries params of the distribution module.
        pub async fn params(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Query/Params",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.distribution.v1beta1.Query", "Params"));
            self.inner.unary(req, path, codec).await
        }
        /// ValidatorDistributionInfo queries validator commission and self-delegation rewards for validator
        pub async fn validator_distribution_info(
            &mut self,
            request: impl tonic::IntoRequest<
                super::QueryValidatorDistributionInfoRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::QueryValidatorDistributionInfoResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Query/ValidatorDistributionInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.distribution.v1beta1.Query",
                        "ValidatorDistributionInfo",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// ValidatorOutstandingRewards queries rewards of a validator address.
        pub async fn validator_outstanding_rewards(
            &mut self,
            request: impl tonic::IntoRequest<
                super::QueryValidatorOutstandingRewardsRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::QueryValidatorOutstandingRewardsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Query/ValidatorOutstandingRewards",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.distribution.v1beta1.Query",
                        "ValidatorOutstandingRewards",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// ValidatorCommission queries accumulated commission for a validator.
        pub async fn validator_commission(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryValidatorCommissionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryValidatorCommissionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Query/ValidatorCommission",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.distribution.v1beta1.Query",
                        "ValidatorCommission",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// ValidatorSlashes queries slash events of a validator.
        pub async fn validator_slashes(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryValidatorSlashesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryValidatorSlashesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Query/ValidatorSlashes",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.distribution.v1beta1.Query",
                        "ValidatorSlashes",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// DelegationRewards queries the total rewards accrued by a delegation.
        pub async fn delegation_rewards(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryDelegationRewardsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryDelegationRewardsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Query/DelegationRewards",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.distribution.v1beta1.Query",
                        "DelegationRewards",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// DelegationTotalRewards queries the total rewards accrued by each
        /// validator.
        pub async fn delegation_total_rewards(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryDelegationTotalRewardsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryDelegationTotalRewardsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Query/DelegationTotalRewards",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.distribution.v1beta1.Query",
                        "DelegationTotalRewards",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// DelegatorValidators queries the validators of a delegator.
        pub async fn delegator_validators(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryDelegatorValidatorsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryDelegatorValidatorsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Query/DelegatorValidators",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.distribution.v1beta1.Query",
                        "DelegatorValidators",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// DelegatorWithdrawAddress queries withdraw address of a delegator.
        pub async fn delegator_withdraw_address(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryDelegatorWithdrawAddressRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryDelegatorWithdrawAddressResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Query/DelegatorWithdrawAddress",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.distribution.v1beta1.Query",
                        "DelegatorWithdrawAddress",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// CommunityPool queries the community pool coins.
        ///
        /// WARNING: This query will fail if an external community pool is used.
        pub async fn community_pool(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryCommunityPoolRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryCommunityPoolResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Query/CommunityPool",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("cosmos.distribution.v1beta1.Query", "CommunityPool"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "server")]
pub mod query_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with QueryServer.
    #[async_trait]
    pub trait Query: std::marker::Send + std::marker::Sync + 'static {
        /// Params queries params of the distribution module.
        async fn params(
            &self,
            request: tonic::Request<super::QueryParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryParamsResponse>,
            tonic::Status,
        >;
        /// ValidatorDistributionInfo queries validator commission and self-delegation rewards for validator
        async fn validator_distribution_info(
            &self,
            request: tonic::Request<super::QueryValidatorDistributionInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryValidatorDistributionInfoResponse>,
            tonic::Status,
        >;
        /// ValidatorOutstandingRewards queries rewards of a validator address.
        async fn validator_outstanding_rewards(
            &self,
            request: tonic::Request<super::QueryValidatorOutstandingRewardsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryValidatorOutstandingRewardsResponse>,
            tonic::Status,
        >;
        /// ValidatorCommission queries accumulated commission for a validator.
        async fn validator_commission(
            &self,
            request: tonic::Request<super::QueryValidatorCommissionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryValidatorCommissionResponse>,
            tonic::Status,
        >;
        /// ValidatorSlashes queries slash events of a validator.
        async fn validator_slashes(
            &self,
            request: tonic::Request<super::QueryValidatorSlashesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryValidatorSlashesResponse>,
            tonic::Status,
        >;
        /// DelegationRewards queries the total rewards accrued by a delegation.
        async fn delegation_rewards(
            &self,
            request: tonic::Request<super::QueryDelegationRewardsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryDelegationRewardsResponse>,
            tonic::Status,
        >;
        /// DelegationTotalRewards queries the total rewards accrued by each
        /// validator.
        async fn delegation_total_rewards(
            &self,
            request: tonic::Request<super::QueryDelegationTotalRewardsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryDelegationTotalRewardsResponse>,
            tonic::Status,
        >;
        /// DelegatorValidators queries the validators of a delegator.
        async fn delegator_validators(
            &self,
            request: tonic::Request<super::QueryDelegatorValidatorsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryDelegatorValidatorsResponse>,
            tonic::Status,
        >;
        /// DelegatorWithdrawAddress queries withdraw address of a delegator.
        async fn delegator_withdraw_address(
            &self,
            request: tonic::Request<super::QueryDelegatorWithdrawAddressRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryDelegatorWithdrawAddressResponse>,
            tonic::Status,
        >;
        /// CommunityPool queries the community pool coins.
        ///
        /// WARNING: This query will fail if an external community pool is used.
        async fn community_pool(
            &self,
            request: tonic::Request<super::QueryCommunityPoolRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryCommunityPoolResponse>,
            tonic::Status,
        >;
    }
    /// Query defines the gRPC querier service for distribution module.
    #[derive(Debug)]
    pub struct QueryServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> QueryServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for QueryServer<T>
    where
        T: Query,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/cosmos.distribution.v1beta1.Query/Params" => {
                    #[allow(non_camel_case_types)]
                    struct ParamsSvc<T: Query>(pub Arc<T>);
                    impl<T: Query> tonic::server::UnaryService<super::QueryParamsRequest>
                    for ParamsSvc<T> {
                        type Response = super::QueryParamsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryParamsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::params(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ParamsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.distribution.v1beta1.Query/ValidatorDistributionInfo" => {
                    #[allow(non_camel_case_types)]
                    struct ValidatorDistributionInfoSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<
                        super::QueryValidatorDistributionInfoRequest,
                    > for ValidatorDistributionInfoSvc<T> {
                        type Response = super::QueryValidatorDistributionInfoResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::QueryValidatorDistributionInfoRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::validator_distribution_info(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ValidatorDistributionInfoSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.distribution.v1beta1.Query/ValidatorOutstandingRewards" => {
                    #[allow(non_camel_case_types)]
                    struct ValidatorOutstandingRewardsSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<
                        super::QueryValidatorOutstandingRewardsRequest,
                    > for ValidatorOutstandingRewardsSvc<T> {
                        type Response = super::QueryValidatorOutstandingRewardsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::QueryValidatorOutstandingRewardsRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::validator_outstanding_rewards(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ValidatorOutstandingRewardsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.distribution.v1beta1.Query/ValidatorCommission" => {
                    #[allow(non_camel_case_types)]
                    struct ValidatorCommissionSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryValidatorCommissionRequest>
                    for ValidatorCommissionSvc<T> {
                        type Response = super::QueryValidatorCommissionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::QueryValidatorCommissionRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::validator_commission(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ValidatorCommissionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.distribution.v1beta1.Query/ValidatorSlashes" => {
                    #[allow(non_camel_case_types)]
                    struct ValidatorSlashesSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryValidatorSlashesRequest>
                    for ValidatorSlashesSvc<T> {
                        type Response = super::QueryValidatorSlashesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryValidatorSlashesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::validator_slashes(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ValidatorSlashesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.distribution.v1beta1.Query/DelegationRewards" => {
                    #[allow(non_camel_case_types)]
                    struct DelegationRewardsSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryDelegationRewardsRequest>
                    for DelegationRewardsSvc<T> {
                        type Response = super::QueryDelegationRewardsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryDelegationRewardsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::delegation_rewards(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DelegationRewardsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.distribution.v1beta1.Query/DelegationTotalRewards" => {
                    #[allow(non_camel_case_types)]
                    struct DelegationTotalRewardsSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<
                        super::QueryDelegationTotalRewardsRequest,
                    > for DelegationTotalRewardsSvc<T> {
                        type Response = super::QueryDelegationTotalRewardsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::QueryDelegationTotalRewardsRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::delegation_total_rewards(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DelegationTotalRewardsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.distribution.v1beta1.Query/DelegatorValidators" => {
                    #[allow(non_camel_case_types)]
                    struct DelegatorValidatorsSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryDelegatorValidatorsRequest>
                    for DelegatorValidatorsSvc<T> {
                        type Response = super::QueryDelegatorValidatorsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::QueryDelegatorValidatorsRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::delegator_validators(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DelegatorValidatorsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.distribution.v1beta1.Query/DelegatorWithdrawAddress" => {
                    #[allow(non_camel_case_types)]
                    struct DelegatorWithdrawAddressSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<
                        super::QueryDelegatorWithdrawAddressRequest,
                    > for DelegatorWithdrawAddressSvc<T> {
                        type Response = super::QueryDelegatorWithdrawAddressResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::QueryDelegatorWithdrawAddressRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::delegator_withdraw_address(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DelegatorWithdrawAddressSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.distribution.v1beta1.Query/CommunityPool" => {
                    #[allow(non_camel_case_types)]
                    struct CommunityPoolSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryCommunityPoolRequest>
                    for CommunityPoolSvc<T> {
                        type Response = super::QueryCommunityPoolResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryCommunityPoolRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::community_pool(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CommunityPoolSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for QueryServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "cosmos.distribution.v1beta1.Query";
    impl<T> tonic::server::NamedService for QueryServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// DelegatorWithdrawInfo is the address for where distributions rewards are
/// withdrawn to by default this struct is only used at genesis to feed in
/// default withdraw addresses.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DelegatorWithdrawInfo {
    /// delegator_address is the address of the delegator.
    #[prost(string, tag = "1")]
    pub delegator_address: ::prost::alloc::string::String,
    /// withdraw_address is the address to withdraw the delegation rewards to.
    #[prost(string, tag = "2")]
    pub withdraw_address: ::prost::alloc::string::String,
}
impl ::prost::Name for DelegatorWithdrawInfo {
    const NAME: &'static str = "DelegatorWithdrawInfo";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.DelegatorWithdrawInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.DelegatorWithdrawInfo".into()
    }
}
/// ValidatorOutstandingRewardsRecord is used for import/export via genesis json.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidatorOutstandingRewardsRecord {
    /// validator_address is the address of the validator.
    #[prost(string, tag = "1")]
    pub validator_address: ::prost::alloc::string::String,
    /// outstanding_rewards represents the outstanding rewards of a validator.
    #[prost(message, repeated, tag = "2")]
    pub outstanding_rewards: ::prost::alloc::vec::Vec<
        ::cosmos_sdk_proto::cosmos::base::v1beta1::DecCoin,
    >,
}
impl ::prost::Name for ValidatorOutstandingRewardsRecord {
    const NAME: &'static str = "ValidatorOutstandingRewardsRecord";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord".into()
    }
}
/// ValidatorAccumulatedCommissionRecord is used for import / export via genesis
/// json.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidatorAccumulatedCommissionRecord {
    /// validator_address is the address of the validator.
    #[prost(string, tag = "1")]
    pub validator_address: ::prost::alloc::string::String,
    /// accumulated is the accumulated commission of a validator.
    #[prost(message, optional, tag = "2")]
    pub accumulated: ::core::option::Option<ValidatorAccumulatedCommission>,
}
impl ::prost::Name for ValidatorAccumulatedCommissionRecord {
    const NAME: &'static str = "ValidatorAccumulatedCommissionRecord";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord".into()
    }
}
/// ValidatorHistoricalRewardsRecord is used for import / export via genesis
/// json.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidatorHistoricalRewardsRecord {
    /// validator_address is the address of the validator.
    #[prost(string, tag = "1")]
    pub validator_address: ::prost::alloc::string::String,
    /// period defines the period the historical rewards apply to.
    #[prost(uint64, tag = "2")]
    pub period: u64,
    /// rewards defines the historical rewards of a validator.
    #[prost(message, optional, tag = "3")]
    pub rewards: ::core::option::Option<ValidatorHistoricalRewards>,
}
impl ::prost::Name for ValidatorHistoricalRewardsRecord {
    const NAME: &'static str = "ValidatorHistoricalRewardsRecord";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord".into()
    }
}
/// ValidatorCurrentRewardsRecord is used for import / export via genesis json.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidatorCurrentRewardsRecord {
    /// validator_address is the address of the validator.
    #[prost(string, tag = "1")]
    pub validator_address: ::prost::alloc::string::String,
    /// rewards defines the current rewards of a validator.
    #[prost(message, optional, tag = "2")]
    pub rewards: ::core::option::Option<ValidatorCurrentRewards>,
}
impl ::prost::Name for ValidatorCurrentRewardsRecord {
    const NAME: &'static str = "ValidatorCurrentRewardsRecord";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord".into()
    }
}
/// DelegatorStartingInfoRecord used for import / export via genesis json.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DelegatorStartingInfoRecord {
    /// delegator_address is the address of the delegator.
    #[prost(string, tag = "1")]
    pub delegator_address: ::prost::alloc::string::String,
    /// validator_address is the address of the validator.
    #[prost(string, tag = "2")]
    pub validator_address: ::prost::alloc::string::String,
    /// starting_info defines the starting info of a delegator.
    #[prost(message, optional, tag = "3")]
    pub starting_info: ::core::option::Option<DelegatorStartingInfo>,
}
impl ::prost::Name for DelegatorStartingInfoRecord {
    const NAME: &'static str = "DelegatorStartingInfoRecord";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.DelegatorStartingInfoRecord".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.DelegatorStartingInfoRecord".into()
    }
}
/// ValidatorSlashEventRecord is used for import / export via genesis json.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidatorSlashEventRecord {
    /// validator_address is the address of the validator.
    #[prost(string, tag = "1")]
    pub validator_address: ::prost::alloc::string::String,
    /// height defines the block height at which the slash event occurred.
    #[prost(uint64, tag = "2")]
    pub height: u64,
    /// period is the period of the slash event.
    #[prost(uint64, tag = "3")]
    pub period: u64,
    /// validator_slash_event describes the slash event.
    #[prost(message, optional, tag = "4")]
    pub validator_slash_event: ::core::option::Option<ValidatorSlashEvent>,
}
impl ::prost::Name for ValidatorSlashEventRecord {
    const NAME: &'static str = "ValidatorSlashEventRecord";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.ValidatorSlashEventRecord".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.ValidatorSlashEventRecord".into()
    }
}
/// GenesisState defines the distribution module's genesis state.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    /// params defines all the parameters of the module.
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
    /// fee_pool defines the fee pool at genesis.
    #[prost(message, optional, tag = "2")]
    pub fee_pool: ::core::option::Option<FeePool>,
    /// fee_pool defines the delegator withdraw infos at genesis.
    #[prost(message, repeated, tag = "3")]
    pub delegator_withdraw_infos: ::prost::alloc::vec::Vec<DelegatorWithdrawInfo>,
    /// fee_pool defines the previous proposer at genesis.
    #[prost(string, tag = "4")]
    pub previous_proposer: ::prost::alloc::string::String,
    /// fee_pool defines the outstanding rewards of all validators at genesis.
    #[prost(message, repeated, tag = "5")]
    pub outstanding_rewards: ::prost::alloc::vec::Vec<ValidatorOutstandingRewardsRecord>,
    /// fee_pool defines the accumulated commissions of all validators at genesis.
    #[prost(message, repeated, tag = "6")]
    pub validator_accumulated_commissions: ::prost::alloc::vec::Vec<
        ValidatorAccumulatedCommissionRecord,
    >,
    /// fee_pool defines the historical rewards of all validators at genesis.
    #[prost(message, repeated, tag = "7")]
    pub validator_historical_rewards: ::prost::alloc::vec::Vec<
        ValidatorHistoricalRewardsRecord,
    >,
    /// fee_pool defines the current rewards of all validators at genesis.
    #[prost(message, repeated, tag = "8")]
    pub validator_current_rewards: ::prost::alloc::vec::Vec<
        ValidatorCurrentRewardsRecord,
    >,
    /// fee_pool defines the delegator starting infos at genesis.
    #[prost(message, repeated, tag = "9")]
    pub delegator_starting_infos: ::prost::alloc::vec::Vec<DelegatorStartingInfoRecord>,
    /// fee_pool defines the validator slash events at genesis.
    #[prost(message, repeated, tag = "10")]
    pub validator_slash_events: ::prost::alloc::vec::Vec<ValidatorSlashEventRecord>,
}
impl ::prost::Name for GenesisState {
    const NAME: &'static str = "GenesisState";
    const PACKAGE: &'static str = "cosmos.distribution.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.distribution.v1beta1.GenesisState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.distribution.v1beta1.GenesisState".into()
    }
}
