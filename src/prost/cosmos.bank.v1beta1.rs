// This file is @generated by prost-build.
/// Generated client implementations.
#[cfg(feature = "client")]
pub mod msg_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Msg defines the bank Msg service.
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    #[cfg(feature = "transport")]
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Send defines a method for sending coins from one account to another account.
        pub async fn send(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::MsgSend,
            >,
        ) -> std::result::Result<
            tonic::Response<::cosmos_sdk_proto::cosmos::bank::v1beta1::MsgSendResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.bank.v1beta1.Msg/Send",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.bank.v1beta1.Msg", "Send"));
            self.inner.unary(req, path, codec).await
        }
        /// MultiSend defines a method for sending coins from some accounts to other accounts.
        pub async fn multi_send(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::MsgMultiSend,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::MsgMultiSendResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.bank.v1beta1.Msg/MultiSend",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.bank.v1beta1.Msg", "MultiSend"));
            self.inner.unary(req, path, codec).await
        }
        /// UpdateParams defines a governance operation for updating the x/bank module parameters.
        /// The authority is defined in the keeper.
        pub async fn update_params(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::MsgUpdateParams,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::MsgUpdateParamsResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.bank.v1beta1.Msg/UpdateParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.bank.v1beta1.Msg", "UpdateParams"));
            self.inner.unary(req, path, codec).await
        }
        /// SetSendEnabled is a governance operation for setting the SendEnabled flag
        /// on any number of Denoms. Only the entries to add or update should be
        /// included. Entries that already exist in the store, but that aren't
        /// included in this message, will be left unchanged.
        pub async fn set_send_enabled(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::MsgSetSendEnabled,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::MsgSetSendEnabledResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.bank.v1beta1.Msg/SetSendEnabled",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.bank.v1beta1.Msg", "SetSendEnabled"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "server")]
pub mod msg_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MsgServer.
    #[async_trait]
    pub trait Msg: std::marker::Send + std::marker::Sync + 'static {
        /// Send defines a method for sending coins from one account to another account.
        async fn send(
            &self,
            request: tonic::Request<::cosmos_sdk_proto::cosmos::bank::v1beta1::MsgSend>,
        ) -> std::result::Result<
            tonic::Response<::cosmos_sdk_proto::cosmos::bank::v1beta1::MsgSendResponse>,
            tonic::Status,
        >;
        /// MultiSend defines a method for sending coins from some accounts to other accounts.
        async fn multi_send(
            &self,
            request: tonic::Request<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::MsgMultiSend,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::MsgMultiSendResponse,
            >,
            tonic::Status,
        >;
        /// UpdateParams defines a governance operation for updating the x/bank module parameters.
        /// The authority is defined in the keeper.
        async fn update_params(
            &self,
            request: tonic::Request<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::MsgUpdateParams,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::MsgUpdateParamsResponse,
            >,
            tonic::Status,
        >;
        /// SetSendEnabled is a governance operation for setting the SendEnabled flag
        /// on any number of Denoms. Only the entries to add or update should be
        /// included. Entries that already exist in the store, but that aren't
        /// included in this message, will be left unchanged.
        async fn set_send_enabled(
            &self,
            request: tonic::Request<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::MsgSetSendEnabled,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::MsgSetSendEnabledResponse,
            >,
            tonic::Status,
        >;
    }
    /// Msg defines the bank Msg service.
    #[derive(Debug)]
    pub struct MsgServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> MsgServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for MsgServer<T>
    where
        T: Msg,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/cosmos.bank.v1beta1.Msg/Send" => {
                    #[allow(non_camel_case_types)]
                    struct SendSvc<T: Msg>(pub Arc<T>);
                    impl<
                        T: Msg,
                    > tonic::server::UnaryService<
                        ::cosmos_sdk_proto::cosmos::bank::v1beta1::MsgSend,
                    > for SendSvc<T> {
                        type Response = ::cosmos_sdk_proto::cosmos::bank::v1beta1::MsgSendResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                ::cosmos_sdk_proto::cosmos::bank::v1beta1::MsgSend,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::send(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SendSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.bank.v1beta1.Msg/MultiSend" => {
                    #[allow(non_camel_case_types)]
                    struct MultiSendSvc<T: Msg>(pub Arc<T>);
                    impl<
                        T: Msg,
                    > tonic::server::UnaryService<
                        ::cosmos_sdk_proto::cosmos::bank::v1beta1::MsgMultiSend,
                    > for MultiSendSvc<T> {
                        type Response = ::cosmos_sdk_proto::cosmos::bank::v1beta1::MsgMultiSendResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                ::cosmos_sdk_proto::cosmos::bank::v1beta1::MsgMultiSend,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::multi_send(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = MultiSendSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.bank.v1beta1.Msg/UpdateParams" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateParamsSvc<T: Msg>(pub Arc<T>);
                    impl<
                        T: Msg,
                    > tonic::server::UnaryService<
                        ::cosmos_sdk_proto::cosmos::bank::v1beta1::MsgUpdateParams,
                    > for UpdateParamsSvc<T> {
                        type Response = ::cosmos_sdk_proto::cosmos::bank::v1beta1::MsgUpdateParamsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                ::cosmos_sdk_proto::cosmos::bank::v1beta1::MsgUpdateParams,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::update_params(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateParamsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.bank.v1beta1.Msg/SetSendEnabled" => {
                    #[allow(non_camel_case_types)]
                    struct SetSendEnabledSvc<T: Msg>(pub Arc<T>);
                    impl<
                        T: Msg,
                    > tonic::server::UnaryService<
                        ::cosmos_sdk_proto::cosmos::bank::v1beta1::MsgSetSendEnabled,
                    > for SetSendEnabledSvc<T> {
                        type Response = ::cosmos_sdk_proto::cosmos::bank::v1beta1::MsgSetSendEnabledResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                ::cosmos_sdk_proto::cosmos::bank::v1beta1::MsgSetSendEnabled,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::set_send_enabled(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SetSendEnabledSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for MsgServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "cosmos.bank.v1beta1.Msg";
    impl<T> tonic::server::NamedService for MsgServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// Generated client implementations.
#[cfg(feature = "client")]
pub mod query_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Query defines the gRPC querier service.
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    #[cfg(feature = "transport")]
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Balance queries the balance of a single coin for a single account.
        pub async fn balance(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryBalanceRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryBalanceResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.bank.v1beta1.Query/Balance",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.bank.v1beta1.Query", "Balance"));
            self.inner.unary(req, path, codec).await
        }
        /// AllBalances queries the balance of all coins for a single account.
        ///
        /// When called from another module, this query might consume a high amount of
        /// gas if the pagination field is incorrectly set.
        pub async fn all_balances(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryAllBalancesRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryAllBalancesResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.bank.v1beta1.Query/AllBalances",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.bank.v1beta1.Query", "AllBalances"));
            self.inner.unary(req, path, codec).await
        }
        /// SpendableBalances queries the spendable balance of all coins for a single
        /// account.
        ///
        /// When called from another module, this query might consume a high amount of
        /// gas if the pagination field is incorrectly set.
        pub async fn spendable_balances(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QuerySpendableBalancesRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QuerySpendableBalancesResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.bank.v1beta1.Query/SpendableBalances",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("cosmos.bank.v1beta1.Query", "SpendableBalances"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// SpendableBalanceByDenom queries the spendable balance of a single denom for
        /// a single account.
        ///
        /// When called from another module, this query might consume a high amount of
        /// gas if the pagination field is incorrectly set.
        pub async fn spendable_balance_by_denom(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.bank.v1beta1.Query/SpendableBalanceByDenom",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.bank.v1beta1.Query",
                        "SpendableBalanceByDenom",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// TotalSupply queries the total supply of all coins.
        ///
        /// When called from another module, this query might consume a high amount of
        /// gas if the pagination field is incorrectly set.
        pub async fn total_supply(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryTotalSupplyRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryTotalSupplyResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.bank.v1beta1.Query/TotalSupply",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.bank.v1beta1.Query", "TotalSupply"));
            self.inner.unary(req, path, codec).await
        }
        /// SupplyOf queries the supply of a single coin.
        ///
        /// When called from another module, this query might consume a high amount of
        /// gas if the pagination field is incorrectly set.
        pub async fn supply_of(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QuerySupplyOfRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QuerySupplyOfResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.bank.v1beta1.Query/SupplyOf",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.bank.v1beta1.Query", "SupplyOf"));
            self.inner.unary(req, path, codec).await
        }
        /// Params queries the parameters of x/bank module.
        pub async fn params(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryParamsRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryParamsResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.bank.v1beta1.Query/Params",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.bank.v1beta1.Query", "Params"));
            self.inner.unary(req, path, codec).await
        }
        /// DenomsMetadata queries the client metadata for all registered coin
        /// denominations.
        pub async fn denoms_metadata(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomsMetadataRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomsMetadataResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.bank.v1beta1.Query/DenomsMetadata",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.bank.v1beta1.Query", "DenomsMetadata"));
            self.inner.unary(req, path, codec).await
        }
        /// DenomMetadata queries the client metadata of a given coin denomination.
        pub async fn denom_metadata(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomMetadataRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomMetadataResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.bank.v1beta1.Query/DenomMetadata",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.bank.v1beta1.Query", "DenomMetadata"));
            self.inner.unary(req, path, codec).await
        }
        /// DenomMetadataByQueryString queries the client metadata of a given coin denomination.
        pub async fn denom_metadata_by_query_string(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomMetadataByQueryStringRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomMetadataByQueryStringResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.bank.v1beta1.Query/DenomMetadataByQueryString",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.bank.v1beta1.Query",
                        "DenomMetadataByQueryString",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// DenomOwners queries for all account addresses that own a particular token
        /// denomination.
        ///
        /// When called from another module, this query might consume a high amount of
        /// gas if the pagination field is incorrectly set.
        pub async fn denom_owners(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomOwnersRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomOwnersResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.bank.v1beta1.Query/DenomOwners",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.bank.v1beta1.Query", "DenomOwners"));
            self.inner.unary(req, path, codec).await
        }
        /// DenomOwnersByQuery queries for all account addresses that own a particular token
        /// denomination.
        pub async fn denom_owners_by_query(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomOwnersByQueryRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomOwnersByQueryResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.bank.v1beta1.Query/DenomOwnersByQuery",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("cosmos.bank.v1beta1.Query", "DenomOwnersByQuery"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// SendEnabled queries for SendEnabled entries.
        ///
        /// This query only returns denominations that have specific SendEnabled settings.
        /// Any denomination that does not have a specific setting will use the default
        /// params.default_send_enabled, and will not be returned by this query.
        pub async fn send_enabled(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QuerySendEnabledRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QuerySendEnabledResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.bank.v1beta1.Query/SendEnabled",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.bank.v1beta1.Query", "SendEnabled"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "server")]
pub mod query_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with QueryServer.
    #[async_trait]
    pub trait Query: std::marker::Send + std::marker::Sync + 'static {
        /// Balance queries the balance of a single coin for a single account.
        async fn balance(
            &self,
            request: tonic::Request<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryBalanceRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryBalanceResponse,
            >,
            tonic::Status,
        >;
        /// AllBalances queries the balance of all coins for a single account.
        ///
        /// When called from another module, this query might consume a high amount of
        /// gas if the pagination field is incorrectly set.
        async fn all_balances(
            &self,
            request: tonic::Request<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryAllBalancesRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryAllBalancesResponse,
            >,
            tonic::Status,
        >;
        /// SpendableBalances queries the spendable balance of all coins for a single
        /// account.
        ///
        /// When called from another module, this query might consume a high amount of
        /// gas if the pagination field is incorrectly set.
        async fn spendable_balances(
            &self,
            request: tonic::Request<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QuerySpendableBalancesRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QuerySpendableBalancesResponse,
            >,
            tonic::Status,
        >;
        /// SpendableBalanceByDenom queries the spendable balance of a single denom for
        /// a single account.
        ///
        /// When called from another module, this query might consume a high amount of
        /// gas if the pagination field is incorrectly set.
        async fn spendable_balance_by_denom(
            &self,
            request: tonic::Request<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse,
            >,
            tonic::Status,
        >;
        /// TotalSupply queries the total supply of all coins.
        ///
        /// When called from another module, this query might consume a high amount of
        /// gas if the pagination field is incorrectly set.
        async fn total_supply(
            &self,
            request: tonic::Request<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryTotalSupplyRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryTotalSupplyResponse,
            >,
            tonic::Status,
        >;
        /// SupplyOf queries the supply of a single coin.
        ///
        /// When called from another module, this query might consume a high amount of
        /// gas if the pagination field is incorrectly set.
        async fn supply_of(
            &self,
            request: tonic::Request<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QuerySupplyOfRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QuerySupplyOfResponse,
            >,
            tonic::Status,
        >;
        /// Params queries the parameters of x/bank module.
        async fn params(
            &self,
            request: tonic::Request<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryParamsRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryParamsResponse,
            >,
            tonic::Status,
        >;
        /// DenomsMetadata queries the client metadata for all registered coin
        /// denominations.
        async fn denoms_metadata(
            &self,
            request: tonic::Request<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomsMetadataRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomsMetadataResponse,
            >,
            tonic::Status,
        >;
        /// DenomMetadata queries the client metadata of a given coin denomination.
        async fn denom_metadata(
            &self,
            request: tonic::Request<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomMetadataRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomMetadataResponse,
            >,
            tonic::Status,
        >;
        /// DenomMetadataByQueryString queries the client metadata of a given coin denomination.
        async fn denom_metadata_by_query_string(
            &self,
            request: tonic::Request<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomMetadataByQueryStringRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomMetadataByQueryStringResponse,
            >,
            tonic::Status,
        >;
        /// DenomOwners queries for all account addresses that own a particular token
        /// denomination.
        ///
        /// When called from another module, this query might consume a high amount of
        /// gas if the pagination field is incorrectly set.
        async fn denom_owners(
            &self,
            request: tonic::Request<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomOwnersRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomOwnersResponse,
            >,
            tonic::Status,
        >;
        /// DenomOwnersByQuery queries for all account addresses that own a particular token
        /// denomination.
        async fn denom_owners_by_query(
            &self,
            request: tonic::Request<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomOwnersByQueryRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomOwnersByQueryResponse,
            >,
            tonic::Status,
        >;
        /// SendEnabled queries for SendEnabled entries.
        ///
        /// This query only returns denominations that have specific SendEnabled settings.
        /// Any denomination that does not have a specific setting will use the default
        /// params.default_send_enabled, and will not be returned by this query.
        async fn send_enabled(
            &self,
            request: tonic::Request<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QuerySendEnabledRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QuerySendEnabledResponse,
            >,
            tonic::Status,
        >;
    }
    /// Query defines the gRPC querier service.
    #[derive(Debug)]
    pub struct QueryServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> QueryServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for QueryServer<T>
    where
        T: Query,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/cosmos.bank.v1beta1.Query/Balance" => {
                    #[allow(non_camel_case_types)]
                    struct BalanceSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<
                        ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryBalanceRequest,
                    > for BalanceSvc<T> {
                        type Response = ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryBalanceResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryBalanceRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::balance(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = BalanceSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.bank.v1beta1.Query/AllBalances" => {
                    #[allow(non_camel_case_types)]
                    struct AllBalancesSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<
                        ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryAllBalancesRequest,
                    > for AllBalancesSvc<T> {
                        type Response = ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryAllBalancesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryAllBalancesRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::all_balances(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AllBalancesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.bank.v1beta1.Query/SpendableBalances" => {
                    #[allow(non_camel_case_types)]
                    struct SpendableBalancesSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<
                        ::cosmos_sdk_proto::cosmos::bank::v1beta1::QuerySpendableBalancesRequest,
                    > for SpendableBalancesSvc<T> {
                        type Response = ::cosmos_sdk_proto::cosmos::bank::v1beta1::QuerySpendableBalancesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QuerySpendableBalancesRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::spendable_balances(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SpendableBalancesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.bank.v1beta1.Query/SpendableBalanceByDenom" => {
                    #[allow(non_camel_case_types)]
                    struct SpendableBalanceByDenomSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<
                        ::cosmos_sdk_proto::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest,
                    > for SpendableBalanceByDenomSvc<T> {
                        type Response = ::cosmos_sdk_proto::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::spendable_balance_by_denom(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SpendableBalanceByDenomSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.bank.v1beta1.Query/TotalSupply" => {
                    #[allow(non_camel_case_types)]
                    struct TotalSupplySvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<
                        ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryTotalSupplyRequest,
                    > for TotalSupplySvc<T> {
                        type Response = ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryTotalSupplyResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryTotalSupplyRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::total_supply(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = TotalSupplySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.bank.v1beta1.Query/SupplyOf" => {
                    #[allow(non_camel_case_types)]
                    struct SupplyOfSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<
                        ::cosmos_sdk_proto::cosmos::bank::v1beta1::QuerySupplyOfRequest,
                    > for SupplyOfSvc<T> {
                        type Response = ::cosmos_sdk_proto::cosmos::bank::v1beta1::QuerySupplyOfResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QuerySupplyOfRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::supply_of(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SupplyOfSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.bank.v1beta1.Query/Params" => {
                    #[allow(non_camel_case_types)]
                    struct ParamsSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<
                        ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryParamsRequest,
                    > for ParamsSvc<T> {
                        type Response = ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryParamsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryParamsRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::params(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ParamsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.bank.v1beta1.Query/DenomsMetadata" => {
                    #[allow(non_camel_case_types)]
                    struct DenomsMetadataSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<
                        ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomsMetadataRequest,
                    > for DenomsMetadataSvc<T> {
                        type Response = ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomsMetadataResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomsMetadataRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::denoms_metadata(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DenomsMetadataSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.bank.v1beta1.Query/DenomMetadata" => {
                    #[allow(non_camel_case_types)]
                    struct DenomMetadataSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<
                        ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomMetadataRequest,
                    > for DenomMetadataSvc<T> {
                        type Response = ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomMetadataResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomMetadataRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::denom_metadata(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DenomMetadataSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.bank.v1beta1.Query/DenomMetadataByQueryString" => {
                    #[allow(non_camel_case_types)]
                    struct DenomMetadataByQueryStringSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<
                        ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomMetadataByQueryStringRequest,
                    > for DenomMetadataByQueryStringSvc<T> {
                        type Response = ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomMetadataByQueryStringResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomMetadataByQueryStringRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::denom_metadata_by_query_string(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DenomMetadataByQueryStringSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.bank.v1beta1.Query/DenomOwners" => {
                    #[allow(non_camel_case_types)]
                    struct DenomOwnersSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<
                        ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomOwnersRequest,
                    > for DenomOwnersSvc<T> {
                        type Response = ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomOwnersResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomOwnersRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::denom_owners(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DenomOwnersSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.bank.v1beta1.Query/DenomOwnersByQuery" => {
                    #[allow(non_camel_case_types)]
                    struct DenomOwnersByQuerySvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<
                        ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomOwnersByQueryRequest,
                    > for DenomOwnersByQuerySvc<T> {
                        type Response = ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomOwnersByQueryResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QueryDenomOwnersByQueryRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::denom_owners_by_query(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DenomOwnersByQuerySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.bank.v1beta1.Query/SendEnabled" => {
                    #[allow(non_camel_case_types)]
                    struct SendEnabledSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<
                        ::cosmos_sdk_proto::cosmos::bank::v1beta1::QuerySendEnabledRequest,
                    > for SendEnabledSvc<T> {
                        type Response = ::cosmos_sdk_proto::cosmos::bank::v1beta1::QuerySendEnabledResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                ::cosmos_sdk_proto::cosmos::bank::v1beta1::QuerySendEnabledRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::send_enabled(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SendEnabledSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for QueryServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "cosmos.bank.v1beta1.Query";
    impl<T> tonic::server::NamedService for QueryServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
